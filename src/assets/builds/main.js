!function(){
    //@ts-check
    "use strict";
    
    
    /**
     * @typedef {import("./shishiji-dts/objects").LanguageComponent} LanguageComponent
     */
    
    
    /**@type {LanguageComponent} */
    const TEXT = {
        JA: {
            LOADING_MAP: "マップを読み込んでいます...",
            MAP_LOADED: "ようこそ",
            MAP_LOAD_RETRYING: "エラーが発生ました<br>{0}秒後に再挑戦します...",
            PROCESSING: "処理中...",
            NOTIFICATION_COPIED_LINK: "リンクをコピーしました！",
            NOTIFICATION_SHARED_EVENT_FOUND: "シェアされたイベントを表示しています",
            NOTIFICATION_SHARED_EVENT_NOT_FOUND: "シェアされたイベントが見つかりませんでした",
            NOTIFICATION_SHARED_EVENT_TRANSITIONED: "指定された位置を表示しています",
            NOTIFICATION_CONNECTION_ERROR: "通信エラーが発生しました",
            NOTIFICATION_ERROR_ANY: "エラーが発生しました。",
            NOTIFICATION_CHECK_YOUR_CONNECTION: "通信状況をご確認ください",
            SHARE_EVENT_MESSAGE: "世田谷学園 獅子児祭のイベント:",
            SHARE_EVENT_POPUP_TITLE: "イベント記事をシェア",
            SHARE_EVENT_POPUP_SUBTITLE: "共有されたリンクを開くと、マップがこのイベントをフォーカスしこの記事が開かれます",
            SHARE_EVENT_DATA_TITLE: "獅子児祭",
            SHARE_EVENT_INCLUDE_EVTH: "現在と同じ位置を指定",
            ARTICLE_NO_ARTICLE: "このイベントに関する記載はありません",
            ARTICLE_CORE_GRADE: "中心学年",
            ARTICLE_CONNECTION_ERROR: "通信エラーが発生しました。<br>ネットワーク状況をご確認の上、再度お試しください。",
            ARIA_ARTICLE_HEADER: "ヘッダー画像",
            ARIA_ARTICLE_ICON: "アイコン画像",
            ERROR_ANY: "エラーが発生しました。<br>再度お試しください。",
        },
        EN: {
            LOADING_MAP: "Loading map...",
            MAP_LOADED: "Welcome",
            MAP_LOAD_RETRYING: "Error occured.<br>Retrying in {0} seconds...",
            PROCESSING: "Processing...",
            NOTIFICATION_COPIED_LINK: "Link Copied!",
            NOTIFICATION_SHARED_EVENT_FOUND: "Displaying the shared event article.",
            NOTIFICATION_SHARED_EVENT_NOT_FOUND: "Sorry, we couldn't find the shared event.",
            NOTIFICATION_SHARED_EVENT_TRANSITIONED: "Showing designated location.",
            NOTIFICATION_CONNECTION_ERROR: "Connection Error",
            NOTIFICATION_ERROR_ANY: "An Error occured.",
            NOTIFICATION_CHECK_YOUR_CONNECTION: "Please check your network connection.",
            SHARE_EVENT_MESSAGE: "Shishiji Festival, Setagayagakuen; ",
            SHARE_EVENT_POPUP_TITLE: "Share Event Article",
            SHARE_EVENT_POPUP_SUBTITLE: "The map focuses on this event and opens this article, when openning a shared link",
            SHARE_EVENT_DATA_TITLE: "Shishiji festival",
            SHARE_EVENT_INCLUDE_EVTH: "let the link display current article location",
            ARTICLE_NO_ARTICLE: "No information available for this event.",
            ARTICLE_CORE_GRADE: "Core Grade",
            ARTICLE_CONNECTION_ERROR: "Connection Error occured.<br>Please check your network status and try again.",
            ARIA_ARTICLE_HEADER: "header image",
            ARIA_ARTICLE_ICON: "icon image",
            ERROR_ANY: "An error occured.<br>Please try again.",
        },
    };
    
    //@ts-check
    "use strict";
    
    
    /**
     * @typedef {import("./shishiji-dts/motion").Position} Position
     * @typedef {import("./shishiji-dts/motion").BackCanvas} BackCanvas
     * @typedef {import("./shishiji-dts/motion").Distance} Distance
     * @typedef {import("./shishiji-dts/motion").Coords} Coords
     * @typedef {import("./shishiji-dts/motion").touchINFO} touchINFO
     * @typedef {import("./shishiji-dts/objects").mapObjComponent} mapObjComponent
     * @typedef {import("./shishiji-dts/objects").Intervals} Intervals
     * 
     * @typedef {import("socket.io").Socket} Socket
     */
    
    
    /**@type {"JA" | "EN"} */
    var LANGUAGE = "JA";
    
    /**
     * assign on interaction
     * pointerPosition: temp variable to get previous controler pos (get diff)
     * cursorPosition: current mouse cursor position (zoom origin)
     * @type {Position} */
    var pointerPosition = [ null, null ];
    /**@type {Position} */
    var cursorPosition = [ null, null ];
    
    
    var DRAGGING = false;
    var zoomRatio = 1;
    
    const href_replaceCD = 400;
    
    
    /**
     * @type {BackCanvas} 
     * @readonly
     *@ts-ignore*/
    const backcanvas = document.createElement("canvas");
    /**@ts-ignore @type {CanvasRenderingContext2D} */
    const bctx = backcanvas.getContext("2d");
    
    
    //@ts-ignore
    backcanvas.canvas = {
        coords: { 
            x: 0,
            y: 0,
        },
        rotation: 0,
    };
    
    
    /**
     * Restrict user map interaction and set magnification of any
     * @readonly
     */
    const MOVEPROPERTY = {
        scroll: 1.05,
        object: {
            /**{@link MOVEPROPERTY.caps.ratio.max} < over & {@link MOVEPROPERTY.caps.ratio.min} > under & over > under*/
            dynamic_to_static: {
                over: 3,
                under: 0.3,
            },
        },
        caps: {
            ratio: {
                max: 10,
                min: 0.1,
            },
        },
        touch: {
            /**
             * how many events to wait before start moving 
             * !high value prevents insta scrolling! (makes more likely to iPhone map tho)
             * @fix
             *   do by velocity
             */
            downCD: 1,
            zoomCD: -1,
            rotate: {
                // degree
                min: 5,
            }
        },
        arrowkeys: {
            interval: 5,
            move: 3,
        },
    };
    
    /**Second */
    const Map_retry_cooldown = 5;
    
    
    /**
     * velocities are assigned with (px/sec)
     * @type {{ x: number, y: number, v: number, a: number, method: "MOUSE" | "TOUCH" | null }}
     */
    var pointerVelocity = {
        x: 0, y: 0, v: 0, a: -75,
        method: null 
    };
    
    var touchZoomVelocity = {
        0: {
            x: 0,
            y: 0,
        },
        1: {
            x: 0,
            y: 0,
        },
        a: -150,
    };
    
    /**@type {number | null} */
    var frictInterval = null;
    /**@type {number | null} */
    var zoomFrictInterval = null;
    
    
    /**@type {Distance} */
    var previousTouchDistance = { 
        x: -1, y: -1,
        distance: -1 
    };
    /**@type {touchINFO} */
    //@ts-ignore
    var prevTouchINFO = {};
    
    
    /**
     * relative radian
     * assign on touch move
     * @type {Radian} 
     */
    var rotatedThisTime = 0;
    /**
     * rotated amount of one pitch time use to limit start of rotation
     * init once when passed min
     * @see {MOVEPROPERTY.touch.rotate.min}
     * @type {Radian}
     */
    var totalRotateThisTime = 0;
    /**
     * mark rotatedThisTime has been bigger than min even once
     */
    var pastRotateMin = false;
    /**
     * @type {Radian} 
     */
    var prevTheta = 0;
    
    /**
     * useful for making smooth map interaction!
     * not map moved, swiping instantly cause proble.
     * init on touch down
     */
    var touchCD = 0;
    var zoomCD = 0;
    
    
    /**@type {Intervals} */
    var Intervals = { };
    
    
    /**@type {mapObjComponent} */
    var mapObjectComponent = { };
    
    
    var MAPDATA = { };
    
    var CURRENT_FLOOR = "";
    
    const overlay_modes = {
        fselector: {
            opened: false,
            colors: {
                current: "rgba(90, 434, 37, 0.8)",
                else: "rgba(188, 34, 124, 0.75)",
            }
        },
    };
    
    
    /**@enum {string} */
    const Symbol_Span = {
        loadgingsymbol: `<span class="material-symbols-outlined loading-symbol">progress_activity</span>`,
        refreshsymbol: `<span class="material-symbols-outlined">refresh</span>`,
    };
    
    /**
     * :literal:
     * @enum {number} 
     */
    const reloadInitializeLevels = {
        DO_NOTHING: 0,
        CLOSE_ARTICLE: 1,
        INIT_ZOOMRADIO: 2,
        INIT_COORDS: 3,
        INIT_FLOOR: 4,
        DO_EVERYTHING: 5,
    }
    
    /**
     * @see {@link reloadInitializeLevels}
     */
    const reloadInitializeLevel = reloadInitializeLevels.DO_NOTHING;
    
    
    // digit
    const paramAbstractDeg = 4;
    /**@enum {string} */
    const ParamName = {
        ZOOM_RATIO: "zr",
        COORDS: "at",
        ARTICLE_ID: "art",
        FLOOR: "fl",
        URL_FROM: "storm",
        LANGUAGE: "lang",
        SCROLL_POS: "scrp",
        ART_TARGET: "atg",
    };
    /**@enum {string} */
    const ParamValues = {
        FROM_ARTICLE_SHARE: "attsrh",
    }
    const objectIdFormat = "disc-{0}";
    
    const ZOOMRATIO_ON_SHARE = 2;
    
    
    const Notifier_prop = {
        /**@ts-ignore @type {NodeJS.Timeout} FAKE */
        Timeout: 0,
        /**@ts-ignore @type {NodeJS.Timeout} FAKE */
        _Timeout: 0,
        /**@ts-ignore @type {NodeJS.Timeout} FAKE */
        __Timeout: 0,
        current: "",
        notifying: false,
    };
    
    /**milisecond */
    const WAIT_BETWEEN_EACH_MAP_IMAGE = 100;
    
    const Ovv_tg_listener = {
        description: () => {},
        details: () => {},
        else: () => {},
    };
    
    const _mcColorList = {
        "0": "#000000",  // Black
        "1": "#0000AA",  // Dark Blue
        "2": "#00AA00",  // Dark Green
        "3": "#00AAAA",  // Dark Aqua
        "4": "#AA0000",  // Dark Red
        "5": "#AA00AA",  // Dark Purple
        "6": "#FFAA00",  // Gold
        "7": "#AAAAAA",  // Gray
        "8": "#555555",  // Dark Gray
        "9": "#5555FF",  // Blue
        "a": "#55FF55",  // Green
        "b": "#55FFFF",  // Aqua
        "c": "#FF5555",  // Red
        "d": "#FF55FF",  // Light Purple
        "e": "#FFFF55",  // Yellow
        "f": "#FFFFFF",  // White
    };
    const _mcDec = {
        "k": 'class="--mcf-obfuscated"',
        "l": 'style="font-weight: bolder;"',
        "m": 'style="text-decoration: line-through;"',
        "n": 'style="text-decoration: underline;"',
        "o": 'style="font-style: italic;"',
        "p": 'style=""',
    };
    const _mcColor = {
        BLACK: "§0",
        DARK_BLUE: "§1",
        DARK_GREEN: "§2",
        DARK_AQUA: "§3",
        DARK_RED: "§4",
        DARK_PURPLE: "§5",
        GOLD: "§6",
        GRAY: "§7",
        DARK_GRAY: "§8",
        BLUE: "§9",
        GREEN: "§a",
        AQUA: "§b",
        RED: "§c",
        LIGHT_PURPLE: "§d",
        YELLOW: "§e",
        WHITE: "§f",
        MAGIC: "§k",
        BOLD: "§l",
        STRIKETHROUGH: "§m",
        UNDERLINE: "§n",
        ITALIC: "§o",
        RESET: "§r",
    };
    
    
    /**@ts-ignore @type {Socket} */
    const ws = io();
    
    const GPATH = {
        LINK: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" width="100%" viewBox="0 0 311 311" enable-background="new 0 0 311 311" xml:space="preserve">
        <path fill="rgba(0, 0, 0, 0)" opacity="1.000000" stroke="none" d=" M171.000000,312.000000   C115.333359,312.000000 60.166618,311.959625 5.000321,312.097198   C1.575440,312.105743 0.900468,311.424225 0.904463,307.999969   C1.022283,207.000168 1.022267,106.000160 0.904507,5.000339   C0.900515,1.576757 1.575329,0.900450 4.999880,0.904445   C105.999702,1.022284 206.999710,1.022256 307.999512,0.904528   C311.422791,0.900538 312.099579,1.574891 312.095581,4.999732   C311.977722,105.999550 311.977722,206.999557 312.095428,307.999359   C312.099426,311.422302 311.426880,312.109009 308.000214,312.097961   C262.500488,311.951172 217.000168,312.000000 171.000000,312.000000  z"/>
        <path fill="#4169e1" opacity="1.000000" stroke="none" d=" M212.588440,62.751225   C203.905151,61.807106 197.318359,64.825386 191.542114,70.667397   C173.146027,89.272934 154.611465,107.742149 136.053268,126.186432   C130.662643,131.543976 127.557449,137.786102 128.348419,145.417740   C128.770218,149.487381 125.725365,150.953064 123.608177,153.027985   C121.330856,155.259842 119.174591,159.867798 116.427277,158.862595   C113.518204,157.798218 113.486778,152.886185 112.890381,149.474075   C110.634079,136.565109 114.234146,125.198303 123.279854,115.974342   C142.766052,96.104149 162.411880,76.382927 182.324997,56.941437   C197.565002,42.062393 221.385269,42.463470 236.456772,57.271034   C251.419540,71.971771 252.308945,96.159264 237.592758,111.384216   C217.905685,131.751923 197.864868,151.796082 177.468582,171.452698   C166.175644,182.336105 152.354523,184.355377 137.501022,179.340317   C134.675583,178.386368 133.868240,177.296005 136.440430,175.062469   C138.072174,173.645538 139.615051,172.101028 141.037430,170.473572   C143.872650,167.229599 146.826492,165.301910 151.682220,165.693344   C157.522110,166.164124 162.672089,163.329041 166.853622,159.153671   C186.194168,139.841492 205.643143,120.635231 224.787735,101.130394   C237.990891,87.678795 231.749924,67.824394 212.588440,62.751225  z"/>
        <path fill="#4169e1" opacity="1.000000" stroke="none" d=" M125.359390,180.359985   C113.330795,192.396744 101.505661,204.137421 89.785324,215.981796   C79.940681,225.930618 79.530716,239.891037 88.669243,248.997726   C97.777161,258.073914 111.812653,257.593933 121.709610,247.737167   C140.482590,229.040421 159.169144,210.256866 177.947128,191.565155   C182.793091,186.741470 185.845337,181.129318 185.354355,174.229935   C185.114212,170.855316 186.130493,168.631439 188.465485,166.387619   C191.451920,163.517807 194.064056,160.258469 197.369263,156.574265   C202.845032,167.292648 203.189789,177.088394 199.851089,187.131454   C197.871994,193.084702 194.467590,198.173920 190.034927,202.601547   C170.818253,221.796356 151.686020,241.076416 132.376938,260.177734   C120.836800,271.593658 103.995110,274.511047 89.358406,268.032440   C74.855324,261.612915 65.525002,246.854904 66.195305,230.890778   C66.609032,221.037491 70.263245,212.376877 77.253769,205.349472   C96.761551,185.738739 116.196274,166.050919 135.974030,146.714890   C147.204605,135.735138 160.803604,133.218796 175.776215,137.693924   C179.222443,138.723923 181.039978,140.034164 177.200104,143.019241   C176.025284,143.932526 174.995834,145.060364 174.013992,146.189240   C170.686951,150.014450 167.343384,152.809952 161.436050,152.308777   C155.639404,151.817017 150.620224,155.047577 146.461792,159.252014   C139.548523,166.241776 132.563232,173.160309 125.359390,180.359985  z"/>
        </svg>`,
        X: `<div id="ppcls" class="protected flxxt"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" width="100%" viewBox="0 0 74 74" enable-background="new 0 0 74 74" xml:space="preserve">
        <path fill="#cccccc" opacity="1.000000" stroke="none" d=" M4.946470,65.071991   C12.848474,57.152008 20.429871,49.417210 28.203484,41.880672   C30.541042,39.614403 30.634775,38.143127 28.243010,35.834614   C20.812458,28.662685 13.681864,21.179546 6.235195,14.025002   C3.681348,11.571340 3.710598,9.955759 6.273559,7.609175   C8.564236,5.511888 10.127145,3.772244 13.123124,6.931504   C20.113310,14.302654 27.533670,21.264761 34.567284,28.596416   C37.092484,31.228617 38.747044,31.484579 41.397747,28.706858   C48.411495,21.357029 55.843914,14.406034 62.836536,7.037086   C65.708282,4.010791 67.337952,5.180474 69.693764,7.500336   C72.020638,9.791706 72.643303,11.345357 69.934212,13.926871   C62.820606,20.705463 56.174713,27.982174 48.948227,34.631981   C45.246632,38.038181 45.724766,40.042202 49.144836,43.224613   C56.335815,49.915897 62.991341,57.180325 70.126801,63.934673   C73.113831,66.762169 71.537231,68.239540 69.494774,70.337128   C67.347832,72.542007 65.760773,73.683098 63.035637,70.827843   C56.021290,63.478584 48.589294,56.527260 41.595966,49.158981   C38.800320,46.213444 37.053719,46.458233 34.382820,49.256115   C27.482727,56.484253 20.323196,63.465958 13.212370,70.490501   C12.018736,71.669647 10.629393,74.121605 8.803199,72.163376   C7.045736,70.278847 2.900609,69.447426 4.946470,65.071991  z"/>
        </svg></div>`,
        ERROR: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" width="100%" viewBox="0 0 150 150" enable-background="new 0 0 150 150" xml:space="preserve">
        <path fill="rgba(0, 0, 0, 0)" opacity="1.000000" stroke="none" d=" M91.000000,151.000000   C61.857235,151.000000 33.214314,150.958221 4.571959,151.066559   C1.799039,151.077042 0.890779,150.769745 0.900395,147.577240   C1.044349,99.784233 1.034018,51.990562 0.915765,4.197404   C0.908644,1.319584 1.631624,0.924331 4.297526,0.929724   C52.090782,1.026403 99.884331,1.024516 147.677612,0.933526   C150.291916,0.928548 151.094894,1.241225 151.087357,4.172537   C150.964233,52.132198 150.973221,100.092323 151.072662,148.052094   C151.078110,150.673111 150.330460,151.068909 147.952454,151.056152   C129.135422,150.955200 110.317589,151.000000 91.000000,151.000000  z"/>
        <path fill="#FE0510" opacity="1.000000" stroke="none" d=" M16.015171,127.594406   C15.389500,122.791283 17.365780,119.574692 20.453056,116.653770   C33.155266,104.636032 45.714687,92.466881 58.466724,80.502739   C60.807846,78.306259 61.034233,77.145973 58.545311,74.817696   C45.411064,62.531193 32.477421,50.030434 19.447935,37.631584   C17.110323,35.407112 15.048482,33.097363 14.779860,29.665586   C14.403472,24.857042 16.140718,21.108147 20.510757,18.976870   C25.255600,16.662802 29.536678,17.749695 33.302704,21.350452   C44.978779,32.514137 56.687225,43.643967 68.362610,54.808376   C76.802582,62.878979 76.785889,62.891991 85.404640,54.679249   C96.858330,43.765102 108.243118,32.777084 119.806976,21.980894   C124.489128,17.609571 130.914474,17.980312 134.985580,22.378096   C138.958405,26.669752 138.802704,32.653728 134.564240,37.221241   C133.659515,38.196201 132.649765,39.073826 131.686584,39.994411   C119.526939,51.616405 107.433807,63.309513 95.150948,74.799805   C92.679291,77.111969 92.804733,78.301476 95.195732,80.544357   C108.556068,93.077042 121.744354,105.793007 135.013336,118.423332   C138.602264,121.839523 140.081070,125.806725 138.278412,130.595840   C136.639862,134.948944 133.301636,137.184692 128.739456,137.434219   C125.197502,137.627945 122.423683,135.944504 119.899986,133.519150   C106.691513,120.825432 93.335205,108.284325 80.223328,95.492310   C77.629730,92.961967 76.252014,92.721878 73.532562,95.384254   C60.800266,107.849289 47.860424,120.103752 34.913631,132.347702   C27.748919,139.123489 19.840908,137.235489 16.015171,127.594406  z"/>
        </svg>`,
        SUCCESS: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" width="100%" viewBox="0 0 485 485" enable-background="new 0 0 485 485" xml:space="preserve">
        <path fill="rgba(0, 0, 0, 0)" opacity="1.000000" stroke="none" d=" M322.000000,486.000000   C214.666687,486.000000 107.833382,486.000000 1.000057,486.000000   C1.000038,324.333405 1.000038,162.666794 1.000019,1.000144   C162.666565,1.000096 324.333130,1.000096 485.999756,1.000048   C485.999847,162.666519 485.999847,324.333038 485.999939,485.999786   C431.500000,486.000000 377.000000,486.000000 322.000000,486.000000  M95.945183,221.436127   C81.252403,226.190308 66.539635,230.883881 51.873966,235.720291   C42.329674,238.867752 40.278519,248.283569 47.616798,255.143646   C54.536247,261.612152 61.663303,267.859497 68.551720,274.360229   C105.407341,309.141724 136.585922,348.139801 158.009033,394.451630   C162.943375,405.118561 174.245758,409.089966 185.479675,404.621857   C196.280319,400.326080 206.986893,395.794220 217.747314,391.396729   C231.462341,385.791809 240.598083,375.944824 245.933609,362.129852   C261.598907,321.568573 280.068604,282.364471 302.893616,245.272308   C332.278625,197.519760 368.051117,155.379913 412.188751,120.601639   C421.592957,113.191551 431.492065,106.411217 441.122345,99.285599   C445.900085,95.750450 446.072113,89.982552 441.241333,87.435913   C429.169312,81.071861 417.009583,79.324211 404.089020,85.881401   C377.042603,99.607414 351.193512,115.206116 326.722809,133.124619   C280.745331,166.791336 241.911728,207.319183 210.130966,254.580948   C202.945587,265.266479 196.375443,276.365692 189.487885,287.328949   C183.492004,276.937561 178.128113,266.378754 171.584320,256.610321   C162.801041,243.498840 153.290695,230.857452 143.724808,218.294220   C138.871735,211.920502 132.318100,209.632675 124.252151,212.409256   C115.142807,215.544983 105.889236,218.261734 95.945183,221.436127  z"/>
        <path fill="#02BD03" opacity="1.000000" stroke="none" d=" M96.321785,221.298401   C105.889236,218.261734 115.142807,215.544983 124.252151,212.409256   C132.318100,209.632675 138.871735,211.920502 143.724808,218.294220   C153.290695,230.857452 162.801041,243.498840 171.584320,256.610321   C178.128113,266.378754 183.492004,276.937561 189.487885,287.328949   C196.375443,276.365692 202.945587,265.266479 210.130966,254.580948   C241.911728,207.319183 280.745331,166.791336 326.722809,133.124619   C351.193512,115.206116 377.042603,99.607414 404.089020,85.881401   C417.009583,79.324211 429.169312,81.071861 441.241333,87.435913   C446.072113,89.982552 445.900085,95.750450 441.122345,99.285599   C431.492065,106.411217 421.592957,113.191551 412.188751,120.601639   C368.051117,155.379913 332.278625,197.519760 302.893616,245.272308   C280.068604,282.364471 261.598907,321.568573 245.933609,362.129852   C240.598083,375.944824 231.462341,385.791809 217.747314,391.396729   C206.986893,395.794220 196.280319,400.326080 185.479675,404.621857   C174.245758,409.089966 162.943375,405.118561 158.009033,394.451630   C136.585922,348.139801 105.407341,309.141724 68.551720,274.360229   C61.663303,267.859497 54.536247,261.612152 47.616798,255.143646   C40.278519,248.283569 42.329674,238.867752 51.873966,235.720291   C66.539635,230.883881 81.252403,226.190308 96.321785,221.298401  z"/>
        </svg>`,
        ERROR_ZAHUMARU: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" height="100%" viewBox="0 0 570 446" enable-background="new 0 0 570 446" xml:space="preserve">
        <path fill="#696969" opacity="1.000000" stroke="none" d=" M571.000000,200.532394   C568.306946,208.355042 568.123535,216.177612 567.251465,223.794434   C562.789673,262.764038 546.815369,296.583954 521.555176,326.089325   C510.760071,338.698547 496.167664,346.371399 481.151215,353.043976   C476.135559,355.272736 471.189758,357.686096 466.069336,359.641418   C462.917633,360.845001 462.533356,361.984131 464.353943,364.885529   C471.719025,376.623199 478.021057,388.924866 481.536530,402.403320   C484.986145,415.629333 483.990112,428.077118 472.466156,437.345398   C464.170593,444.017273 453.908020,445.349976 443.724335,445.800049   C417.134094,446.975311 392.277496,440.493469 368.905029,427.965363   C352.178925,418.999847 335.547363,409.795624 319.958923,399.007690   C314.906097,395.510895 310.443726,395.199890 304.962708,395.401764   C265.855988,396.841888 227.093445,395.054016 189.668015,381.962738   C177.386826,377.666809 165.330399,372.652130 154.462555,365.577026   C147.264648,360.891113 140.369614,355.593170 133.443405,350.432556   C130.490707,348.232513 127.605713,347.899506 124.127052,348.286224   C100.481300,350.914948 76.915016,354.564331 53.044552,354.556824   C40.275841,354.552826 27.922388,352.260040 16.096888,347.232269   C8.755793,344.111115 3.480060,339.312500 1.336089,331.140320   C1.000000,326.975464 1.000000,322.950897 1.000000,318.463196 
         C3.376402,295.981659 17.352743,281.607239 33.534016,268.710846   C39.021038,264.337708 45.065052,260.808899 51.176392,257.388824   C56.439529,254.443405 56.672108,253.908295 54.868317,248.324036   C49.119022,230.525131 44.523479,212.428452 43.010410,193.766144   C40.113178,158.031479 46.641487,124.511131 67.248711,94.378822   C87.514320,64.746025 115.371582,45.111958 148.168518,31.720520   C181.799683,17.988455 216.667435,8.840371 252.508194,3.227576   C260.410309,1.990074 268.374146,1.587016 276.679199,1.228959   C277.750000,1.000000 278.500000,1.000000 279.625000,1.000000   C285.728638,2.100623 291.507782,1.290968 297.630554,1.228230   C298.444458,1.000000 298.888885,1.000000 299.666687,1.000000   C305.582336,2.184408 311.235565,1.533103 316.839264,1.459227   C346.326447,1.070482 375.332520,4.723552 403.742920,12.398619   C428.676880,19.134527 453.423706,26.758713 475.807739,40.059822   C492.095734,49.738541 508.270264,59.598160 521.862549,73.254295   C535.629333,87.085739 545.460083,103.295914 553.514832,120.783516   C557.694641,129.858414 561.451965,139.111740 564.635132,148.601212   C568.422546,159.892136 570.805725,171.386719 570.770203,183.674744   C571.000000,189.354935 571.000000,194.709854 571.000000,200.532394  z"/>
        <path fill="#FEFEFE" opacity="1.000000" stroke="none" d=" M104.245888,76.822083   C97.739792,91.879280 96.722549,106.709717 102.988739,121.729637   C110.099190,138.773239 122.765167,150.800873 138.338593,159.862885   C170.593521,178.631699 205.503448,190.216858 242.072037,196.980515   C273.833710,202.855087 305.860748,204.476578 338.050201,201.870743   C379.122131,198.545853 418.874603,189.550522 456.732910,173.024368   C460.576996,171.346344 462.487274,172.058823 464.994202,174.992828   C504.939514,221.743271 509.264587,288.974274 475.483032,340.255676   C474.405884,341.890808 473.352295,343.545837 471.318329,344.394806   C457.961456,349.970032 444.472961,355.191345 430.747589,359.789978   C430.136566,359.994751 429.426575,359.903961 428.371521,360.027008   C418.194000,361.905426 408.454315,363.957306 398.792603,366.314545   C383.863831,369.956818 368.405396,369.613403 353.386078,372.642517   C348.578186,373.612183 343.440674,373.065613 338.520386,373.054504   C323.516174,373.020691 308.633850,374.542999 293.699432,375.375000   C287.017303,375.747253 280.411530,375.049774 273.846649,373.729706   C260.098816,370.965363 246.101669,370.484833 232.169922,369.733704   C220.291061,369.093292 209.375900,365.162567 198.376144,361.357147   C192.085220,359.180786 185.972137,356.472229 179.650742,354.399323   C159.235413,347.704620 142.328445,334.773438 124.540276,323.461517   C118.544823,319.648865 115.295624,312.606628 109.153305,308.651215   C103.163757,304.794312 98.304008,299.303192 91.340546,296.108643   C81.165604,277.707245 73.064621,258.842255 66.755379,239.201096   C60.529221,219.818649 56.350479,200.077988 55.995838,179.637421   C55.280785,138.423248 70.938614,104.336143 100.871407,76.454025   C101.358215,76.000565 101.837326,75.538834 102.630592,74.941086   C103.729370,75.086746 104.127396,75.708878 104.245888,76.822083  z"/>
        <path fill="#FFFFFF" opacity="1.000000" stroke="none" d=" M417.333282,30.586254   C431.850800,35.196571 446.078003,39.759689 458.995605,46.982624   C472.347992,54.448689 486.353638,61.379581 495.125519,75.117760   C506.158081,92.396545 505.904633,112.200676 493.740143,129.894714   C482.756622,145.870956 467.141815,155.871277 449.654297,163.061050   C414.798798,177.391525 378.490662,185.874084 340.943848,189.213730   C284.930420,194.195892 230.718384,186.634338 178.433350,165.927780   C161.692749,159.297989 145.379974,151.631271 131.567307,139.747589   C119.526703,129.388489 111.037552,116.918198 111.216629,100.269508   C111.367424,86.251007 118.345932,75.210915 127.672462,65.477478   C138.329132,54.355858 151.351196,46.747986 165.317764,40.534397   C169.606049,38.626568 174.284988,38.896912 178.639526,36.888046   C198.705139,27.631248 220.182663,23.087683 241.760162,19.054663   C258.628906,15.901749 275.553802,13.475970 292.822571,13.808544   C331.659210,14.556479 370.342163,16.320032 407.859619,27.811804   C410.878021,28.736361 413.926147,29.563778 417.333282,30.586254  z"/>
        <path fill="#FDFDFD" opacity="1.000000" stroke="none" d=" M408.714386,379.253723   C421.555969,376.238892 433.671570,372.156097 445.594879,367.569946   C449.497314,366.068939 451.349213,366.849884 453.407196,370.317841   C459.610992,380.771912 465.507446,391.380096 468.996918,403.059662   C474.640869,421.950562 467.583344,431.523865 447.798065,433.053741   C422.904480,434.978577 399.597687,429.487061 377.427155,418.556152   C369.687225,414.740082 362.202911,410.402802 354.637817,406.238220   C353.567688,405.649109 351.999390,405.454712 351.976929,403.393616   C358.405304,399.664978 365.518311,398.672028 372.233368,396.473114   C382.926544,392.971558 393.533081,389.342438 403.621002,384.272583   C405.930084,383.112152 406.603790,380.823456 408.714386,379.253723  z"/>
        <path fill="#515151" opacity="1.000000" stroke="none" d=" M91.039650,296.193939   C92.702431,295.393402 94.071747,294.776764 95.851669,296.305298   C102.410362,301.937592 110.250237,306.404694 115.735687,312.893127   C127.696693,327.041077 144.256363,334.469910 159.254044,343.900848   C172.818146,352.430328 189.033661,355.978485 203.965454,361.999023   C219.778168,368.374786 236.400543,368.812500 252.969574,369.798737   C263.796387,370.443207 274.364655,373.822815 285.106262,373.753876   C305.203705,373.624786 325.309387,372.540070 345.381714,371.348663   C366.086273,370.119781 386.725708,367.972717 406.948578,363.110382   C413.603882,361.510223 420.206696,360.006531 427.529449,360.059753   C425.448090,364.054871 420.730225,363.262482 417.144989,364.946075   C410.758240,367.945221 403.734497,369.527863 398.071350,374.151123   C396.769623,375.213776 394.682983,375.749298 392.947784,375.771759   C385.270142,375.871307 378.155670,379.623505 370.384430,379.091827   C369.159119,379.007965 367.669189,379.512512 366.649475,380.235596   C360.160919,384.836823 352.691254,385.126556 345.257996,384.947357   C331.764923,384.621918 318.511658,386.512604 305.323456,388.883240   C301.939117,389.491608 299.861847,386.804626 296.786621,386.963562   C285.157501,387.564575 273.599823,385.779205 261.953094,385.867218   C249.150864,385.963989 236.421310,384.647156 223.730301,382.424500   C218.730469,381.548859 213.565079,380.279968 207.856888,381.577301   C202.526443,382.788818 197.209747,378.644318 192.391586,375.824615   C176.687927,366.634552 161.401993,356.767334 146.316788,346.594635   C139.231781,341.816833 134.107391,334.647369 126.394234,330.554047   C119.872063,327.092804 113.915489,322.618591 108.519859,317.618866   C102.956039,312.463257 97.950836,306.699463 92.783875,301.125122   C91.659416,299.911987 90.934479,298.355133 91.039650,296.193939  z"/>
        <path fill="#FDFDFD" opacity="1.000000" stroke="none" d=" M95.473694,338.759705   C74.835838,341.359314 54.375645,344.468384 33.820320,340.066376   C30.762754,339.411591 27.744484,338.401398 24.841846,337.225372   C13.480697,332.622375 11.469157,328.372894 14.581758,316.410675   C17.903143,303.646118 26.015196,294.082001 35.364513,285.409393   C42.705204,278.600037 50.997807,273.107300 59.786980,268.287872   C62.629185,266.729370 63.674938,267.167450 64.823822,270.025360   C68.667770,279.587463 73.273750,288.795685 78.613602,297.970276   C81.738251,300.208832 83.307159,303.261963 83.971237,306.422150   C86.001854,316.085266 89.802216,325.014618 94.279045,333.722565   C95.029930,335.183075 95.855873,336.654755 95.473694,338.759705  z"/>
        <path fill="#FCFCFC" opacity="1.000000" stroke="none" d=" M557.729492,203.558029   C555.508972,223.651657 552.185669,243.041611 545.407349,261.768066   C545.249695,249.843369 544.679565,238.000549 543.005615,226.216705   C539.159668,199.142944 530.802551,174.074509 511.152405,154.017136   C508.265991,151.070862 505.061493,148.349792 501.665771,146.017136   C499.102478,144.256317 498.907410,143.172424 500.817444,140.658646   C510.469849,127.955124 515.934021,113.787834 515.168152,97.555679   C514.989319,93.766029 514.557861,90.043655 513.294434,86.006500   C517.200867,86.588028 518.542603,89.714546 520.364197,91.959984   C533.751587,108.462265 542.190308,127.610535 549.616333,147.286575   C556.414612,165.299255 559.579285,183.833832 557.729492,203.558029  z"/>
        <path fill="#515151" opacity="1.000000" stroke="none" d=" M408.853821,378.837219   C408.066223,386.803802 400.677246,387.056976 395.897430,389.199799   C382.141357,395.366791 367.666260,399.804810 352.478668,403.037506   C344.756653,405.786530 335.846924,401.720490 332.612823,396.990936   C331.333099,395.119507 330.640747,393.313965 331.952423,391.020050   C333.334381,388.603149 334.994781,389.543701 337.028412,389.750916   C345.134064,390.576904 353.212402,389.825867 361.211243,388.393066   C370.431000,386.741608 379.393036,384.231293 388.333771,381.338257   C394.730042,379.268524 401.834808,379.388153 408.853821,378.837219  z"/>
        <path fill="#515151" opacity="1.000000" stroke="none" d=" M95.561607,339.337646   C92.472824,331.522308 88.097061,324.634979 85.467888,316.937286   C83.401947,310.888611 83.091560,304.207764 78.995117,298.503235   C80.526352,295.028778 82.751244,295.551605 84.271111,297.873505   C91.037880,308.211060 100.553574,316.277435 107.532181,326.495422   C110.016075,330.132294 111.780518,334.395050 115.227196,337.462646   C116.713936,338.785828 116.125900,341.379211 114.419342,341.463074   C108.172005,341.770111 101.613815,343.961151 95.561607,339.337646  z"/>
        <path fill="#686868" opacity="1.000000" stroke="none" d=" M243.736023,264.403534   C259.040649,270.093872 269.818176,280.857727 276.004852,295.549011   C281.664764,308.989502 275.225189,326.276398 262.903656,337.221436   C252.012451,346.895905 239.235794,347.889526 225.895996,346.739868   C212.566116,345.591156 199.774521,341.920807 187.331131,337.043121   C176.522125,332.806091 167.117065,325.719879 162.708588,315.498199   C154.527496,296.529175 156.447281,273.018921 179.368423,262.145477   C186.588470,258.720398 194.136139,256.081818 202.764130,256.453217   C203.607620,260.133759 200.512177,261.711212 198.875992,264.007355   C194.864990,269.636200 194.623215,272.673431 198.405212,278.425781   C201.430313,283.026886 205.053467,287.031647 209.469452,290.365417   C211.010956,291.529144 212.718964,292.698730 213.503601,295.027100   C213.382965,296.881500 212.170197,297.580719 211.269028,298.397736   C213.284683,298.035522 214.996292,298.875549 215.664581,300.654388   C220.711029,314.086823 232.693756,317.933624 244.648575,321.804382   C250.655075,323.749207 256.701996,323.893372 261.720001,321.959106   C246.435196,322.688202 231.865173,318.717865 219.909393,307.160706   C216.705261,304.063416 214.876053,300.237061 215.454376,295.277405   C221.130508,292.276733 227.318710,291.183197 232.371368,287.437958   C235.176468,285.358704 237.998978,283.385620 240.445297,280.826752   C244.266861,276.829407 245.648193,272.442413 243.750015,267.155731   C243.466354,266.365723 243.336761,265.547363 243.736023,264.403534  z"/>
        <path fill="#222222" opacity="1.000000" stroke="none" d=" M213.346268,295.448914   C208.192520,290.528137 202.591263,286.639313 198.584930,281.026062   C192.971130,273.160583 192.832947,270.259705 198.655899,262.576141   C200.051971,260.733948 201.613266,259.016968 203.141083,256.923828   C217.491348,253.851379 231.056671,255.316238 243.679306,263.891998   C248.816696,274.555603 244.868027,279.095947 237.432587,285.276276   C231.412445,290.280212 224.703217,294.197906 216.217575,295.060486   C215.189026,295.715942 214.459808,295.808685 213.346268,295.448914  z"/>
        <path fill="#252525" opacity="1.000000" stroke="none" d=" M344.834961,258.755127   C341.737030,260.407806 338.953217,261.865784 335.908844,263.460205   C338.660431,267.439301 341.261475,271.282288 343.950165,275.062958   C346.082520,278.061279 346.424835,281.106110 343.344666,283.410797   C340.188690,285.772278 336.713806,285.753662 334.098236,282.347809   C331.368042,278.792694 328.778778,275.115570 326.349854,271.348663   C325.109741,269.425415 324.094116,269.117340 322.053528,270.278778   C318.599945,272.244476 314.971100,273.917572 311.350616,275.570587   C307.625122,277.271576 304.307129,276.502655 302.494232,272.770325   C300.633270,268.938873 302.160004,266.123749 306.091339,264.429840   C309.134918,263.118408 311.999939,261.391418 315.047333,260.090363   C317.315521,259.121979 317.126862,257.996979 315.893188,256.342407   C313.907501,253.679306 312.012054,250.948929 310.079529,248.246246   C307.744110,244.980164 307.208557,241.823547 310.949219,239.209366   C314.205505,236.933716 317.820801,237.791901 320.442810,241.398071   C322.589752,244.350784 324.749054,247.307739 326.669373,250.407471   C328.047699,252.632370 329.308472,253.189667 331.737457,251.733292   C335.577850,249.430695 339.622833,247.458725 343.638580,245.462173   C347.700653,243.442581 351.331390,244.355103 352.974335,247.802063   C354.876404,251.792633 353.266693,254.462463 349.550598,256.254242   C348.059448,256.973236 346.614868,257.788788 344.834961,258.755127  z"/>
        <path fill="#252525" opacity="1.000000" stroke="none" d=" M147.708282,228.808136   C150.107620,227.011139 148.088913,225.665253 147.608429,224.312729   C146.835281,222.136353 145.430847,220.159424 144.830704,217.952057   C143.852539,214.354187 145.566177,211.833084 148.908554,210.469788   C152.112488,209.162933 154.225708,210.592285 155.957947,213.313858   C157.852661,216.290726 158.018677,221.505203 161.447464,221.993683   C164.552231,222.436035 168.121170,219.573944 171.495697,218.193939   C172.723267,217.691925 174.010590,217.329361 175.218262,216.786591   C178.400406,215.356461 181.272446,215.555435 182.718018,219.037262   C184.199860,222.606354 183.674820,226.053680 179.859314,227.977661   C176.309967,229.767410 172.654144,231.420502 168.897842,232.701736   C165.901749,233.723663 165.680405,235.002380 167.583954,237.188248   C168.454300,238.187714 169.274887,239.234467 170.192520,240.188095   C172.909302,243.011475 172.561096,246.136673 170.303741,248.716888   C168.064682,251.276169 164.961365,251.105682 162.114105,249.351501   C159.325867,247.633682 157.481583,245.006897 156.315033,242.059326   C155.217331,239.285706 153.861893,239.179276 151.523987,240.558533   C149.391708,241.816467 147.045197,242.718597 144.770172,243.725708   C140.225586,245.737518 136.895905,244.793030 135.206696,240.877335   C133.234314,236.305191 136.016800,234.136581 139.677979,232.482986   C142.246262,231.323013 144.798767,230.128067 147.708282,228.808136  z"/>
        <path fill="#F0F0F0" opacity="1.000000" stroke="none" d=" M212.953949,295.569916   C213.717484,295.218994 214.416016,295.187805 215.465057,295.161438   C216.871994,308.366486 227.435013,312.558685 237.229446,316.824890   C245.622406,320.480621 254.664963,322.201935 263.981537,320.111542   C264.821991,319.922943 265.891052,319.507416 266.982819,320.930481   C260.093781,325.059662 252.991486,325.173645 245.604706,323.279297   C238.316727,321.410309 231.654816,318.185150 225.028427,314.652344   C218.213531,311.018982 217.228333,302.422211 211.075989,297.939362   C211.235931,297.758545 212.062439,296.824097 212.953949,295.569916  z"/>
        <path fill="#EAEAEA" opacity="1.000000" stroke="none" d=" M177.840469,307.624756   C188.742111,308.970947 199.152237,309.061859 208.534637,300.683289   C204.583420,310.160736 191.304398,313.580109 178.380981,309.013794   C177.905502,308.582062 177.782562,308.308990 177.840469,307.624756  z"/>
        </svg>`,
        CAUTION: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" width="100%" viewBox="0 0 513 465" enable-background="new 0 0 513 465" xml:space="preserve">
        <path fill="#1A1A1A" opacity="1.000000" stroke="none" d=" M1.241642,406.291565   C1.000000,397.979095 1.000000,389.958191 1.000000,381.468628   C2.626651,379.337738 1.912117,377.197418 2.076329,375.277710   C2.914839,365.475098 6.296447,356.660797 11.252174,348.168213   C34.800465,307.813751 58.069195,267.296387 81.503136,226.875076   C109.275192,178.970917 136.848953,130.952103 164.763901,83.130356   C172.809677,69.346962 180.437805,55.309315 188.724182,41.674023   C198.891800,24.943106 212.635666,11.963506 230.823471,4.042763   C234.567596,2.412208 238.659729,2.736317 242.719604,1.239572   C253.020889,1.000000 263.041779,1.000000 273.531342,1.000000   C278.017975,3.156844 282.707458,2.430180 286.901733,4.297610   C305.751221,12.690011 319.418091,26.544600 329.576782,44.133774   C346.881622,74.096001 364.132477,104.089661 381.385284,134.081680   C397.395935,161.914307 413.407318,189.747406 429.417786,217.580139   C445.011414,244.688248 460.591858,271.804871 476.263397,298.868744   C485.683655,315.137054 495.062225,331.431091 504.414917,347.739288   C509.361725,356.365021 512.577759,365.518890 513.760559,375.720215   C514.000000,387.354218 514.000000,398.708466 514.000000,410.531342   C513.404785,411.626373 513.065125,412.360260 513.029785,413.233398   C512.079041,436.694061 482.807068,463.873047 459.975769,464.862488   C458.845581,464.911438 457.622314,464.844727 456.290283,465.758484   C323.312439,466.000000 190.624878,466.000000 57.468658,466.000000   C56.488663,465.566986 55.957302,465.198334 55.261578,465.090363   C28.685551,460.965332 13.349062,443.850342 3.712149,420.282043   C1.943465,415.956512 2.713393,411.075836 1.241642,406.291565  z"/>
        <path fill="#FEEE11" opacity="1.000000" stroke="none" d=" M303.656067,70.365646   C330.374512,116.783737 356.898132,162.889709 383.436737,208.987091   C413.619659,261.414612 444.028931,313.713684 473.867493,366.336426   C482.060669,380.785858 484.399078,396.641937 476.859924,412.323120   C469.861542,426.879578 456.549988,431.539825 441.556854,432.785400   C439.237732,432.978119 436.895538,432.931213 434.564026,432.931335   C316.092834,432.937531 197.618622,432.467316 79.152313,433.228210   C44.447426,433.451080 27.864651,407.550079 37.606255,375.986908   C39.657917,369.339447 43.535931,363.744202 46.922001,357.876099   C79.987740,300.572845 113.171227,243.337555 146.296280,186.068512   C170.265106,144.629410 194.090668,103.106926 218.207977,61.754524   C225.510376,49.233570 235.219589,38.865047 249.896881,35.210342   C266.735779,31.017393 279.633789,38.445839 290.569153,50.521240   C295.865906,56.370163 299.531860,63.300018 303.656067,70.365646  z"/>
        <path fill="#1B1B1A" opacity="1.000000" stroke="none" d=" M237.961578,279.007935   C234.194275,240.800507 230.057770,203.081604 228.722260,165.135254   C228.675461,163.805618 228.696930,162.469925 228.576248,161.147125   C227.114120,145.121521 236.249771,140.009003 246.888672,137.687683   C258.045624,135.253342 269.090393,135.751068 279.222229,141.820908   C285.513489,145.589905 288.125854,151.226715 287.510864,158.648773   C284.584351,193.969177 281.804596,229.301758 278.969513,264.629730   C277.931244,277.567535 276.998840,290.515259 275.801147,303.438354   C275.005646,312.022095 268.225250,317.718506 259.006592,317.994934   C249.118195,318.291412 242.002274,313.406128 240.719818,304.762329   C239.476028,296.379150 238.874359,287.900726 237.961578,279.007935  z"/>
        <path fill="#1C1C1A" opacity="1.000000" stroke="none" d=" M245.764053,342.591187   C256.913269,336.996185 267.661682,338.554352 275.204102,346.603333   C282.246124,354.118317 283.484985,365.276398 278.203979,374.235443   C273.363861,382.446655 265.970581,386.453003 256.623535,385.744720   C246.493347,384.977112 239.059158,379.654083 235.937897,369.771423   C233.073013,360.700500 234.957565,352.392181 241.984756,345.603699   C243.050217,344.574432 244.295731,343.731567 245.764053,342.591187  z"/>
        </svg>`,
        NO_WiFi: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" width="100%" viewBox="0 0 566 566" enable-background="new 0 0 566 566" xml:space="preserve">
        <path fill="#ffffff" opacity="1.000000" stroke="none" d=" M198.287079,151.049698   C228.478516,142.793930 259.173096,138.262146 290.520721,139.173904   C365.215118,141.346436 430.794006,166.985260 487.146484,216.082016   C499.049011,226.452057 500.365234,243.423141 490.396881,254.924133   C480.232697,266.651062 463.062439,267.763916 451.113251,257.288879   C413.054016,223.924927 369.019836,203.376007 318.927765,196.316345   C278.004028,190.548798 237.934387,194.679321 198.600250,208.285278   C198.261002,188.979767 198.274033,170.014725 198.287079,151.049698  z"/>
        <path fill="#ffffff" opacity="1.000000" stroke="none" d=" M198.512405,223.744019   C258.654114,201.640976 318.394592,202.495102 377.588440,227.205948   C399.845245,236.497192 420.071442,249.234818 438.386688,264.954651   C446.558929,271.968872 449.706940,281.004852 447.572540,291.384430   C445.348328,302.200653 438.540405,309.434357 427.765015,312.313171   C418.028778,314.914337 409.477295,312.260162 401.820526,305.786560   C382.117462,289.128082 359.863617,277.035828 335.027161,270.070831   C289.414917,257.279541 245.171722,261.149414 202.490402,281.886444   C201.295807,282.466858 200.101196,283.047241 198.567215,283.315308   C198.194855,276.524414 198.100327,270.045502 198.141754,263.567444   C198.226685,250.292709 198.384567,237.018463 198.512405,223.744019  z"/>
        <path fill="#ffffff" opacity="1.000000" stroke="none" d=" M198.267944,301.030304   C212.528717,295.193054 226.348724,287.655334 241.129456,283.824066   C294.380188,270.021118 343.341278,280.347382 387.230743,313.518127   C402.191986,324.825500 402.323273,345.601013 388.160034,357.052094   C378.222931,365.086273 364.625824,365.007324 353.570007,356.592896   C339.161560,345.626862 323.221893,338.107086 305.381348,334.861725   C272.145386,328.815796 242.067795,336.188354 214.791107,356.027893   C210.752808,358.965149 205.654221,360.444672 200.539474,362.287964   C195.138626,347.151062 185.006042,339.009888 169.341782,337.928131   C169.588730,334.915466 169.835663,331.902802 170.497314,328.447998   C187.289688,325.471008 196.325378,316.560944 198.267944,301.030304  z"/>
        <path fill="#EC1B25" opacity="1.000000" stroke="none" d=" M198.242203,300.560791   C196.325378,316.560944 187.289688,325.471008 170.514374,328.038849   C158.967316,327.735596 150.260559,323.053436 144.005310,312.892151   C139.865799,305.357941 140.722031,297.807159 140.627670,290.380188   C140.484909,279.141754 140.281479,267.904114 140.103851,256.666138   C140.214188,251.168945 140.324539,245.671768 140.306976,239.396255   C140.322372,226.526413 140.567184,214.434952 140.575684,202.343323   C140.582077,193.244690 140.285339,184.145844 140.123535,175.047089   C140.278976,166.893036 140.455597,158.739304 140.585495,150.584839   C140.864075,133.098129 152.763107,120.781281 169.426819,120.760483   C185.728882,120.740128 197.696487,132.970596 198.239853,150.603912   C198.274033,170.014725 198.261002,188.979767 198.274734,208.401550   C198.295837,213.529022 198.290176,218.199722 198.398468,223.307220   C198.384567,237.018463 198.226685,250.292709 198.141754,263.567444   C198.100327,270.045502 198.194855,276.524414 198.267578,283.462402   C198.277039,289.311646 198.246750,294.701447 198.242203,300.560791  z"/>
        <path fill="#ffffff" opacity="1.000000" stroke="none" d=" M281.185852,447.090454   C257.072662,445.244171 239.236145,425.308167 240.117279,401.689178   C240.995193,378.156738 260.494904,359.583038 284.192749,359.706848   C307.875671,359.830536 327.216095,378.517883 327.753052,402.209686   C328.362518,429.099091 305.966248,448.697845 281.185852,447.090454  z"/>
        <path fill="#ffffff" opacity="1.000000" stroke="none" d=" M139.776810,175.138367   C140.285339,184.145844 140.582077,193.244690 140.575684,202.343323   C140.567184,214.434952 140.322372,226.526413 140.141418,238.899597   C132.116287,245.403610 123.908783,251.366364 116.191803,257.907837   C103.954247,268.281189 89.170647,267.746368 78.518173,256.087158   C67.953018,244.523514 68.212563,227.553040 79.562706,217.181320   C97.684792,200.621429 117.819550,186.852539 139.776810,175.138367  z"/>
        <path fill="#EC1D26" opacity="1.000000" stroke="none" d=" M168.907990,337.992126   C185.006042,339.009888 195.138626,347.151062 200.188461,362.292419   C201.740906,374.709961 199.048279,385.382935 189.303772,393.463867   C179.239944,401.809631 164.863739,403.033264 153.854797,396.610138   C142.747162,390.129395 136.384018,377.122925 138.387222,364.993896   C140.641754,351.343170 150.209137,341.356750 163.554398,338.765594   C165.179016,338.450165 166.833542,338.288879 168.907990,337.992126  z"/>
        <path fill="#ffffff" opacity="1.000000" stroke="none" d=" M139.759262,256.786621   C140.281479,267.904114 140.484909,279.141754 140.627670,290.380188   C140.722031,297.807159 139.865799,305.357941 143.835846,312.597351   C132.765335,311.704559 125.158752,305.540375 121.429420,295.244385   C117.622803,284.735016 119.657722,274.874847 127.602119,266.792084   C131.184128,263.147675 135.455887,260.181183 139.759262,256.786621  z"/>
        </svg>`,
    };
    
    //@ts-check
    "use strict";
    
    
    /**
     * @typedef {import("./shishiji-dts/motion").Degree} Degree
     */
    
    
    /**
     * 
     * @param {string} str 
     * @param  {any[]} args 
     * @returns {string}
     */
    function formatString(str, ...args){
        for (const [i, arg] of args.entries()){
            const regExp = new RegExp(`\\{${i}\\}`, "g");
            str = str.replace(regExp, arg);
        }
        return str;
    }
    
    
    /**
     * 
     * @param {Degree} deg 
     * @returns {Radian}
     */
    function toRadians(deg){
        return deg*(Math.PI/180);
    }
    
    
    /**
     * 
     * @param {Degree} rad 
     * @returns {Radian}
     */
    function toDegrees(rad){
        return rad*(180/Math.PI)
    }
    
    
    /**
     * 
     * @param  {...number} n 
     * @returns {number}
     */
    function avg(...n){
        var t = 0;
        n.forEach(i => {
            t += i;
        });
        return t/n.length;
    }
    
    
    /**
     * @param {NonnullPosition} backcanvasPos 
     */
    function toCanvasPos(backcanvasPos){
        var u = backcanvasPos.map(k => {
    
        });
    }
    
    
    /**
     * 
     * @param {mapObjectElement} elm 
     * @returns {Coords}
     */
    function getCoords(elm){
        /**@ts-ignore @type {number[]} */
        const r = elm.getAttribute("coords")?.split(" ").map(t => { return Number(t); });
        return { x: r[0], y: r[1] };
    }
    
    
    /**
     * 
     * @param {mapObjectElement} elm 
     * @returns {string}
     */
    function getBehavior(elm){
        /**@ts-ignore @type {number[]} */
        return elm.getAttribute("behavior");
    }
    
    
    /**
     * 
     * @param {mapObjectElement} elm 
     * @returns {{width: number, height: number}}
     */
    function getDefaultSize(elm){
        /**@ts-ignore @type {number[]} */
        const r = elm.getAttribute("dfsize")?.split(" ").map(t => { return Number(t); });
        return { width: r[0], height: r[1] };
    }
    
    
    /**
     * 
     * @param {string} message 
     */
    function startLoad(message){
        $("#app-mount").show();
        $("#place-selector").hide();
        $("#load_spare")
        .removeClass("loaddoneman")
        .show();
        $("#spare_message").text(message);
    }
    
    
    /**
     * 
     * @param {string} html 
     */
    function setLoadMessage(html){
        $("#spare_message").html(html);
    }
    
    
    /**
     * 
     * @param {string} [message] 
     */
    function endLoad(message){
        if (message)
            setTimeout(() => {
                $("#spare_message").text(message);
            }, 200);
        setTimeout(() => {
            $("#load_spare").addClass("loaddoneman");
            setTimeout(() => {
                clearInterval(Intervals.load);
                $("#place-selector").addClass("hello").show();
                $("#spare_message").text("");
            }, 950);
        }, 1000);
    }
    
    
    /**
     * @deprecated use {@link mcFormat} instead
     * @param {string} str 
     * @returns {string}
     */
    function parseMCFormat(str){
        var cl_count = 0;
        var dec_count = 0;
    
        if (str.length < 1)
            return "";
        
        str = "<mcft-cl>§p" + str;
    
        for (var pat in _mcColorList){
            var str_splited = str.split("\u00A7".concat(pat));
            cl_count += str_splited.length - 1;
            str = str_splited.join("<mcft-cl style=\"color: ".concat(_mcColorList[pat], "\">"));
        }
    
        for (var decoration in _mcDec){
            var code = "\u00A7".concat(decoration);
            while (str.includes(code)) {
                var code = "\u00A7".concat(decoration);
                dec_count++;
                str = str.replace(code, "<mcft-dec ".concat(_mcDec[decoration], ">"));
                if (str.indexOf("§r") < str.indexOf(code) || str.indexOf(code) == -1) {
                    var esc = "";
                    for (var i = 0; i <= cl_count; i++) {
                        esc += "</mcft-cl>";
                    }
                    for (var i = -2; i < dec_count; i++) {
                        esc += "</mcft-dec>";
                    }
                    str = str.replace("§r", esc);
                    cl_count = 0;
                    dec_count = 0;
                }
            }
        }
    
        for (var i = 0; i <= cl_count; i++) {
            str += "</mcft-cl>";
        }
    
        for (var i = 0; i < dec_count; i++) {
            str += "</mcft-dec>";
        }
    
        return str;
    }
    
    
    /**
     * 
     * @param {JQuery.PlainObject<any>} element 
     * @param {(event: JQuery.TriggeredEvent<any, undefined, any, any>) => void} callback 
     * @param {{forceLeft?: boolean}} [options] 
     */
    function listenInterOnEnd(element, callback, options){
        if (typeof options === "undefined")
            options = {};
        $(element).on("touchstart mousedown", function(e){
            e.preventDefault();
            if (options){
                if (options.forceLeft && e.button && e.button != 0)
                    return;
            }
            
            var moved = false;
            $(this)
            .on("touchmove mousemove wheel mousewheel", onmove)
            .on("touchend mouseup mouseleave touchleave", onleave);
    
            function onmove(){
                e.preventDefault();
                moved = true;
            }
            /**@this {HTMLElement}*/
            function onleave(e){
                e.preventDefault();
                if (!moved)
                    callback(e);
                $(this)
                .off("touchmove mousemove wheel mousewheel", onmove)
                .off("touchend mouseup mouseleave touchleave", onleave);
            }
        });
    }
    
    
    /**
     * 
     * @param {string} str 
     * @returns 
     */
    function escapeHTML(str){
        str = str.replace(/&/g, "&amp;")
                 .replace(/</g, "&lt;")
                 .replace(/>/g, "&gt;")
                 .replace(/"/g, "&quot;")
                 .replace(/'/g, "&#39;")
                 .replace(/ /g, "&nbsp;");
    
        return str;
    }
    
    
    /**
     * 
     * @param {string} key 
     * @param {string | number} value 
     */
    function setParam(key, value){
        const here = window.location.href;
        const urlParams = new URLSearchParams(window.location.search);
        var yhere = "";
    
        if (key == ParamName.COORDS){
            if (urlParams.toString() != ""){
                const _h = getParam(ParamName.ZOOM_RATIO);
                yhere = here.includes("@") ? here.replace(/@.*/, "")+"@"+value+"x"+(_h === null ? 1 : _h)+"?"+urlParams.toString() : here.replace(/\?.*/, "")+"@"+value+"?"+urlParams.toString();
            } else {
                yhere = here+"@"+value;
            }
        } else if (key == ParamName.ZOOM_RATIO){
            if (urlParams.toString() != ""){
                const _c = getParam(ParamName.COORDS);
                yhere = here.includes("@") ? here.replace(/@.*/, "")+"@"+(_c === null ? "0,0" : _c)+"x"+value+"?"+urlParams.toString() : here.replace(/\?.*/, "")+"@"+value+"?"+urlParams.toString();
            } else {
                yhere = here+"@"+getParam(ParamName.COORDS)+value;
            }
        } else {
            urlParams.set(key, encodeURIComponent(String(value)));
        
            yhere = here.split("?")[0] + "?" + urlParams.toString();
        }
    
        window.history.replaceState("", "", yhere);
    }
    
    
    /**
     * 
     * @param {string} key 
     * @param {string} [value] 
     */
    function delParam(key, value){
        const here = window.location.href;
        const urlParams = new URLSearchParams(window.location.search);
    
        if (value) value = encodeURIComponent(value);
    
        urlParams.delete(key, value);
    
        const yhere = here.split("?")[0] + "?" + urlParams.toString();
        window.history.replaceState("", "", yhere);
    }
    
    
    /**
     * 
     * @param {string} key 
     * @param {string} [url] 
     * @returns {string | null}
     */
    function getParam(key, url){
        if (url === void 0)
            url = window.location.href;
    
        if (key == ParamName.COORDS){
            const reg = /@([^?&]+)x([^?&]+)/;
            const _reg = /@([^?&]+)/;
            var res = url.match(reg);
    
            if (!res)
                res = url.match(_reg);
            
            return res ? res[1].replace(/x/g, "") : null;
        } else if (key == ParamName.ZOOM_RATIO){
            const reg = /@([^?&]+)x([^?&]+)/;
            const res = url.match(reg);
    
            return res ? res[2] : null;
        }
    
        const urlParams = new URLSearchParams(window.location.search);
        const val = urlParams.get(key);
    
        return val ? decodeURIComponent(val) : null;
    }
    
    
    /**
     * 
     * @param {string | null} discriminator 
     * @returns {mapObject | null}
     */
    function searchObject(discriminator){
        for (const key in mapObjectComponent){
            const data = mapObjectComponent[key];
            if (data.discriminator == discriminator) return data;
        }
        return null;
    }
    
    
    /**
     * 
     * @param {number} diffratio 
     * @param {boolean} setzr
     *      set to the limit when this gets invoked
     */
    function willOverflow(diffratio, setzr){
        const _r = zoomRatio*diffratio;
        
        if (MOVEPROPERTY.caps.ratio.max < _r && diffratio > 1){
            if (setzr)
                zoomRatio = MOVEPROPERTY.caps.ratio.max;
            return true;
        }
        if (MOVEPROPERTY.caps.ratio.min > _r && diffratio < 1){
            if (setzr)
                zoomRatio = MOVEPROPERTY.caps.ratio.min;
            return true;
        }
    
        return false;
    }
    
    
    /**
     * 
     * @param {string} key 
     */
    function getCookie(key){
        const cookies = document.cookie.split("; ");
      
        for (const cookie of cookies) {
            const [ckey, cval] = cookie.split("=");
            if (ckey === key){
                return decodeURIComponent(cval);
            } 
        }
      
        return null;
    }
    
    
    /**
     * 
     * @param {string} key 
     */
    function delCookie(key){
        document.cookie = `${key}=; max-age=0;`;
    }
    
    
    /**
     * 
     * @param {string} orgname 
     * @param {string} filename 
     */
    function toOrgFilepath(orgname, filename){
        return "/resources/cloud/org/"+orgname+"/"+filename;
    }
    
    
    /**
     * 
     * @param {string} orgname 
     * @param {string} filename 
     */
    function toAdminFilepath(orgname, filename){
        return "/resources/img/static/"+orgname+"/"+filename;
    }
    
    
    /**
     * 
     * @param {mapObject} mapobject 
     */
    function getPathConverter(mapobject){
        return mapobject.object.type.event === "org" ? toOrgFilepath : toAdminFilepath;
    }
    
    
    /**
     * 
     * @returns {"JA" | "EN" | null}
     */
    function getUserLang(){
        const lang = navigator.language;
    
        return digitLang(lang);
    }
    
    
    /**
     * 
     * @param {string | null} lang 
     * @returns {"JA" | "EN" | null}
     */
    function digitLang(lang){
        if (lang)
            switch (lang.toUpperCase()){
                case "JA":
                    return "JA";
                default:
                    return "EN";
            }
        else 
            return null;
    }
    
    
    /**
     * 
     * @param {string} link 
     * @returns {"image" | "video" | "unknown"}
     */
    function getMediaType(link){
        var extension = link.split(".").slice(-1)[0].toLowerCase();
    
        if (["jpg", "jpeg", "png", "gif", "webp"].indexOf(extension) !== -1) {
            return "image";
        }
    
        if (["mp4", "webm", "avi", "mov", "flv"].indexOf(extension) !== -1) {
            return "video";
        }
    
        return "unknown";
    }
    
    //@ts-check
    "use strict";
    
    
    
    const STYLES = {
        "§0": "color:#000000",
        "§1": "color:#0000AA",
        "§2": "color:#00AA00",
        "§3": "color:#00AAAA",
        "§4": "color:#AA0000",
        "§5": "color:#AA00AA",
        "§6": "color:#FFAA00",
        "§7": "color:#AAAAAA",
        "§8": "color:#555555",
        "§9": "color:#5555FF",
        "§a": "color:#55FF55",
        "§b": "color:#55FFFF",
        "§c": "color:#FF5555",
        "§d": "color:#FF55FF",
        "§e": "color:#FFFF55",
        "§f": "color:#FFFFFF",
        
        "§l": "font-weight:bold",
        "§n": "text-decoration:underline", 
        "§o": "font-style:italic",
        "§m": "text-decoration:line-through",
    
        "§L": "font-weight:bolder",
        "§x": "font-size:48px;line-height:1.5",
        "§y": "font-size:36px;line-height:1.333",
        "§z": "font-size:24px;line-height:1",
    };
    
    
    /**
     * 
     * @param {HTMLElement} elem 
     */
    function _MCobfuscate(elem){
        elem.classList.add("MCOBF", "crucial");
    }
    
    
    /**
     * 
     * @param {string} string 
     * @param {Array} codes 
     * @returns {HTMLSpanElement}
     */
    function _applyMCCode(string, codes){
        var len = codes.length;
        var elem = document.createElement("span"),
            obfuscated = false;
        for (var i = 0; i < len; i++){
            elem.style.cssText += STYLES[codes[i]] + ";";
            if(codes[i] === "§k") {
                _MCobfuscate(elem);
                obfuscated = true;
            }
        }
    
        elem.innerHTML = string;
    
        return elem;
    }
    
    
    /**
     * 
     * @param {string} string 
     * @returns {DocumentFragment}
     */
    function _parseMCFormat(string){
        var codes = string.match(/§.{1}/g) || [],
            indexes = [],
            apply = [],
            tmpStr,
            indexDelta,
            final = document.createDocumentFragment(),
            len = codes.length,
            string = string.replace(/\n|\\n/g, "<br>");
        
        for(var i = 0; i < len; i++){
            indexes.push(string.indexOf(codes[i]));
            string = string.replace(codes[i], "\x00\x00");
        }
    
        if(indexes[0] !== 0){
            final.appendChild(_applyMCCode(string.substring(0, indexes[0]), []));
        }
    
        for(var i = 0; i < len; i++){
        	indexDelta = indexes[i + 1] - indexes[i];
            if(indexDelta === 2){
                while (indexDelta === 2){
                    apply.push(codes[i]);
                    i++;
                    indexDelta = indexes[i + 1] - indexes[i];
                }
                apply.push (codes[i]);
            } else {
                apply.push(codes[i]);
            }
            if (apply.lastIndexOf("§r") > -1){
                apply = apply.slice(apply.lastIndexOf("§r") + 1);
            }
            tmpStr = string.substring(indexes[i], indexes[i + 1]);
            final.appendChild(_applyMCCode(tmpStr, apply));
        }
        return final;
    }
    
    
    /**
     * @param {string} str 
     * @param {(S: string) => string} srcConverter 
     * @returns {string}
     */
    function mcFormat(str, srcConverter){
        str = escapeHTML(str);
    
        str = str.replace(/\n/g, "").replace(/§v/g, "\n");
    
        var r = "";
        const el = _parseMCFormat(str);
    
        for (var e of Array.from(el.children)){
            r += e.outerHTML;
        }
    
        const imgreg = /%\:IMG-S=([^\-]+)-W=(\d+);%/g;
        const vidreg = /%\:VIDEO-S=([^\-]+)-W=(\d+);%/g;
        const linkreg = /#\:LINK-H=(https?:\/\/(?!.*#:).*)-T=(.*);#/g;
        const imgmatches = r.matchAll(imgreg) || [];
        const vidmacthes = r.matchAll(vidreg) || [];
        const linkmacthes = r.matchAll(linkreg) || [];
    
        for (const imgmacth of imgmatches){
            const width = Number(imgmacth[2]);
            r = r.replace(imgmacth[0], `<img class="article-image doaJSD protected" src="${srcConverter(imgmacth[1])}" style="width: ${(width > 100 || width < 0) ? 100 : width}%;">`);
        }
    
        for (const vidmacth of vidmacthes){
            const width = Number(vidmacth[2]);
            r = r.replace(vidmacth[0], `<video class="article-video protected" src="${srcConverter(vidmacth[1])}#t=0.001" controls preload="metadata" playsinline style="width: ${(width > 100 || width < 0) ? 100 : width}%;"></video>`);
        }
    
        for (const linkmacth of linkmacthes){
            r = r.replace(linkmacth[0], `<a class="article-outsidelink protected" href="${new URL(linkmacth[1])}" target="_blank">${(linkmacth[2].length > 0) ? linkmacth[2] : linkmacth[1]}</a>`);
        }
    
        return r;
    }
    
    
    /**
     * Obfucated font
     */
    !function(){
        const abc = "123456789abcdefghijklmnopqrstuvwxyz";
        const obfuscaters = abc.split("").concat(abc.slice(9).toUpperCase().split(""));
    
        setInterval(function(){
            const obfs = document.getElementsByClassName("MCOBF");
            for (const obf of obfs){
                for (const ch of obf.childNodes){
                    var content = "";
                    if (ch.textContent == null)
                        continue;
                    for (const char of ch.textContent.split("")){
                        const c = Math.round(Math.random() * (obfuscaters.length -1));
                        content += obfuscaters[c];
                    }
                    ch.textContent = content;
                }
            }
        }, 15);
        return 0;
    }();
    
    //@ts-check
    "use strict";
    
    
    !function(){
        !function(){
            var prevEvent,
                currentEvent;
    
            document.documentElement.addEventListener("mousemove", function(event){
                pointerVelocity.method = "MOUSE";
                currentEvent = event;
            });
        
            setInterval(function(){
                var movementX = 0;
                var movementY = 0;
                var movement = 0;
    
                if (prevEvent && currentEvent){
                    var movementX = currentEvent.screenX - prevEvent.screenX;
                    var movementY = currentEvent.screenY - prevEvent.screenY;
                    var movement = Math.sqrt(movementX*movementX + movementY*movementY);
                }
                
                prevEvent = currentEvent;
    
                if (pointerVelocity.method == "MOUSE"){
                    pointerVelocity.x = 100*movementX;
                    pointerVelocity.y = 100*movementY;
                    pointerVelocity.v = 100*movement;
                }
            }, 20);
            return 0;
        }();
        
        !function(){
            var wait_o2 = 0;
            /**@type {NodeJS.Timeout} */
            var t;
    
            function g(t){
                var k = 0;
                var r = 0;
                for (var w  of t){
                    k += w.clientX;
                    r += w.clientY;
                }
                k /= t.length;
                r /= t.length;
                return { x: k, y: r };
            }
    
            var prevEvent,
                currentEvent;
    
            document.documentElement.addEventListener("touchmove", function(event){
                pointerVelocity.method = "TOUCH";
                currentEvent = event;
            });
        
            setInterval(function(){
                var movementX = 0;
                var movementY = 0;
                var movement = 0;
    
    
                if (currentEvent && currentEvent.touches.length >= 2){
                    wait_o2 = 1;
                    if (t)
                        clearTimeout(t);
                    t = setTimeout(()=>{
                        wait_o2 = 0;
                    }, 250);
                }
    
                if (prevEvent && currentEvent && currentEvent.touches.length == 1 && wait_o2 === 0){
                    var p = g(currentEvent.touches),
                        j = g(prevEvent.touches);
                    movementX = p.x - j.x;
                    movementY = p.y - j.y;
                    movement = Math.sqrt(movementX*movementX + movementY*movementY);
                }
                
                prevEvent = currentEvent;
    
                if (pointerVelocity.method == "TOUCH"){
                    pointerVelocity.x = 100*movementX;
                    pointerVelocity.y = 100*movementY;
                    pointerVelocity.v = 100*movement;
                }
            }, 20);
            return 0;
        }();
    
        !function(){
            /**@type {NodeJS.Timeout} */
            var t;
    
            function g(t){
                var k = 0;
                var r = 0;
                for (var w  of t){
                    k += w.clientX;
                    r += w.clientY;
                }
                k /= t.length;
                r /= t.length;
                return {x: k, y: r};
            }
    
            var prevEvent,
                currentEvent;
    
            document.documentElement.addEventListener("touchmove", function(event){
                pointerVelocity.method = "TOUCH";
                currentEvent = event;
            });
        
            setInterval(function(){
                var movements = {
                    0: {
                        x: 0,
                        y: 0,
                    },
                    1: {
                        x: 0,
                        y: 0,
                    },
                };
    
                if (!currentEvent && !prevEvent || currentEvent.touches.length == 1) 
                    return;
    
                if (prevEvent && currentEvent && currentEvent.touches.length == 1){
                    for (var i = 0; i < 2; i++){
                        var p = currentEvent.touches[i];
                        var j = prevEvent.touches[i];
                        movements[i].x = p.clientX - j.clientX;
                        movements[i].y = p.clientY - j.clientY;
                    }
                }
                
                prevEvent = currentEvent;
    
                if (pointerVelocity.method == "TOUCH"){
                    for (var i = 0; i < 2; i++){
                        touchZoomVelocity[i].x = 100*movements[i].x;
                        touchZoomVelocity[i].y = 100*movements[i].y;
                    }
                }
            }, 20);
            return 0;
        }();
        return 0;
    }();
    
    //@ts-check
    "use strict";
    
    
    !function(){
        const root = document.documentElement;
    
        window.addEventListener("resize", function(e){
            const width = window.innerWidth;
            const height = window.innerHeight;
    
            root.style.setProperty("--window-width", width+"px");
            root.style.setProperty("--window-height", height+"px");
            root.style.setProperty("--window-half-width", width/2+"px");
            root.style.setProperty("--window-half-height", height/2+"px");
        });
    
        window.dispatchEvent(new Event("resize"));
        setInterval(() => {
            window.dispatchEvent(new Event("resize"));
        }, 500);
        
        return 0;
    }();
    
    //@ts-check
    "use strict";
    
    
    /**
     * @typedef {import("../shishiji-dts/motion").NonnullPosition} NonnullPosition
     */
    
    
    /**
     * 
     * @param {TouchList} touches 
     * @returns {number}
     */
    function getMidestOfTouches(touches){
        if (touches.length == 1)
            return 0;
    
        var amx = 0;
        var amy = 0;
        var am = 0;
    
        for (var touch of Array.from(touches)){
            amx += touch.clientX;
            amy += touch.clientY;
        }
    
        const middle = {x: amx/touches.length, y: amy/touches.length};
    
        for (var touch of Array.from(touches)){
            const dis = Math.abs(Math.sqrt((touch.clientX - middle.x)**2 
                + (touch.clientY - middle.y)**2));
            am += dis;
        }
        return 2*am/touches.length;
    }
    
    
    /**
     * 
     * @param {TouchList | Touch[]} touches 
     * @returns {NonnullPosition}
     */
    function getMiddlePos(touches){
        var av_x = 0;
        var av_y = 0;
        const _a = touches.length;
    
        for (const t  of touches){
            av_x += t.clientX;
            av_y += t.clientY;
        }
    
        av_x /= _a;
        av_y /= _a;
        return [ av_x, av_y ];
    }
    
    
    /**
     * get vertical tilt from touches[0:2]
     * @param {TouchList} touches 
     * @returns {Radian}
     */
    function getThouchesTheta(touches){
        const abs = Math.abs,
              sqrt = Math.sqrt,
              pow = Math.pow;
        /**@type {NonnullPosition} */
        const t1 = [touches[0].clientX, window.innerHeight - touches[0].clientY],
              /**@type {NonnullPosition} */
              t2 = [touches[1].clientX, window.innerHeight - touches[1].clientY];
        const S = [t1, t2];
    
        const distance = abs(sqrt(pow(S[0][0] - S[1][0], 2) + pow(S[0][1] - S[1][1], 2)));
        const sinTheta = (1 / distance)*(S[1][1] - S[0][1]);
        const cosTheta = (1 / distance)*(S[1][0] - S[0][0]);
    
        /**@type {Radian} */
        var theta = Math.acos(cosTheta);
        
        if (sinTheta < 0){
            theta = 2*Math.PI - theta;
        }
        // about 1/2
        if (Math.abs(theta - prevTheta) > Math.PI/2){
    
        }
        return theta;
    }
    
    
    /**
     * 
     * @param {TouchList} touches 
     */
    function savePrevTouches(touches){
        prevTouchINFO.touches = [];
        for (var t of touches){
            prevTouchINFO.touches.push({
                x: t.clientX,
                y: t.clientY
            });
            prevTouchINFO.real = Array.from(touches);
        }
    }
    
    
    /**
     * get middle position between touches[0:2]
     * @param {TouchList} touches 
     * @returns {NonnullPosition}
     */
    function getMiddlePosForZoom(touches){
        const S = [[touches[0].clientX, touches[0].clientY], [touches[1].clientX, touches[1].clientY]];
        /**@type {NonnullPosition} */
        const middle = [S[0][0] + S[1][0] / 2, S[1][1] + S[0][1] / 2];
        return middle;
    }
    
    
    /**
     * @param {Touch} t1 
     * @param {Touch} t2 
     * @returns {number}
     */
    function touchDistance(t1, t2){
        return Math.abs(
            Math.sqrt(
                (t1.clientX - t2.clientX)**2 + (t1.clientY - t2.clientY)**2
            )
        );
    }
    
    //@ts-check
    "use strict";
    
    
    /**
     * @typedef {import("../shishiji-dts/objects").DrawMapData} DrawMapData
     */
    
    
    /**
     * Draw tiles
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx
     * @param {DrawMapData} data 
     * @param {Function} [callback]
     * @returns {Promise<void>} 
     */
    async function drawMap(canvas, ctx, data, callback){
        const xrange = data.xrange;
        const yrange = data.yrange;
        const tile_width = data.tile_width;
        const tile_height = data.tile_height;
        const src_formatter = data.format;
        /**@type {HTMLImageElement[]} */
        var al = [];
        var wait = 0;
        var processed = 0;
        /**@type {{ x: number, y: number, dx: number, dy: number, dw: number, dh: number, src: string }[]} */
        var erroredArray = [];
        const tileAmount = (xrange+1)*(yrange+1);
    
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    
        backcanvas.width = tile_width*(xrange+1);
        backcanvas.height = tile_height*(yrange+1);
        
    
        return new Promise((resolve) => {
            for (var y = 0; y <= yrange; y++){
                for (var x = 0; x <= xrange; x++){
                    var dh = tile_width,
                        dw = tile_height,
                        dx = dw*x,
                        dy = dh*y;
    
                    !function(x, y, dx, dy, dw, dh){
                        const img = new Image();
                        const src = formatString(src_formatter, y, x);
    
                        img.onload = function(){
                            bctx.drawImage(img, 0, 0, tile_width, tile_height, dx, dy, dw, dh);
                            ctx.drawImage(backcanvas, ...[ backcanvas.canvas.coords.x ,backcanvas.canvas.coords.y ]);
                            
                            processed++;
                            al.push(img);
    
                            if (al.length >= tileAmount)
                                resolve("map loaded");
                        }
    
                        function reloaderrimg(){
                            var t = Map_retry_cooldown;
    
                            const g = setInterval(() => {
                                setLoadMessage(formatString(TEXT[LANGUAGE].MAP_LOAD_RETRYING, t));
                                $(`#load_spare:not([style*="display: none"]) #spare_logo`).css("animation", "load_rotator .75s infinite linear");
    
                                Notifier.notifyHTML(
                                    `<div id="cpy-lin-not" class="flxxt">${GPATH.NO_WiFi}${TEXT[LANGUAGE].NOTIFICATION_CHECK_YOUR_CONNECTION}</div>`,
                                    5000,
                                    "check ur WiFi",
                                    false,
                                    true,
                                );
    
                                t--;
    
                                if (t <= -1){
                                    $(`#load_spare:not([style*="display: none"]) #spare_logo`).css("animation", "load_rotator 0.25s infinite linear");
                                    retry();
                                    clearInterval(g);
                                }
                            }, 1000);
                        }
    
                        function handleError(){
                            var t = Map_retry_cooldown;
    
                            processed++;
    
                            if (processed >= tileAmount)
                                reloaderrimg();
                        }
    
                        function retry(){
                            for (const cvsidata of erroredArray){
                                const img = new Image();
                                const src = cvsidata.src;
    
                                setLoadMessage(TEXT[LANGUAGE].LOADING_MAP);
                                processed--;
    
                                img.onload = function(){
                                    bctx.drawImage(img, 0, 0, tile_width, tile_height, cvsidata.dx, cvsidata.dy, cvsidata.dw, cvsidata.dh);
                                    ctx.drawImage(backcanvas, ...[ backcanvas.canvas.coords.x ,backcanvas.canvas.coords.y ]);
    
                                    erroredArray = erroredArray.filter(p => { if (p.src != src) return true; });
                                    processed++;
    
                                    al.push(img);
    
                                    if (al.length >= tileAmount)
                                        resolve("map loaded");
                                    else if (processed >= tileAmount)
                                        reloaderrimg();
                                }
    
                                img.onerror = handleError;
    
                                img.src = src;
                            }
                        }
    
                        img.onerror = () => {
                            erroredArray.push({ x: x, y: y, dx: dx, dy: dy, dw: dw, dh: dh, src: src });
                            handleError();
                        };
                        
                        setTimeout(() => {
                            img.src = src;
                        }, wait);
    
                        wait += WAIT_BETWEEN_EACH_MAP_IMAGE;
    
                        return 0;
                    }(x, y, dx, dy, dw, dh);
                }
            }
        }).then(() => {
            window.scroll({ top: 0, behavior: "instant" });
            
            if (typeof callback === "function")
                callback(al);
        });
    }
    
    
    /**
     * 
     * @param {boolean} [accurated] 
     */
    function setBehavParam(accurated){
        const abstraction = 10**paramAbstractDeg;
        const K = [ backcanvas.canvas.coords.x, backcanvas.canvas.coords.y ];
        const zr = accurated ? zoomRatio : Math.round(zoomRatio*abstraction)/abstraction;
        const at = accurated ? K[0]+","+K[1] : Math.round(K[0]*abstraction)/abstraction+","+Math.round(K[1]*abstraction)/abstraction;
        
        setParam(ParamName.ZOOM_RATIO, zr);
        setParam(ParamName.COORDS, at);
    }
    
    
    /**
     * 
     * @param {Coords} coords 
     * @param {number} [abs_zoomRatio] 
     */
    function setCoordsOnMiddle(coords, abs_zoomRatio){
        if (abs_zoomRatio === void 0){
            abs_zoomRatio = zoomRatio;
        }
        /**@ts-ignore @type {HTMLCanvasElement} */
        const canvas = document.getElementById("shishiji-canvas");
        /**@ts-ignore @type {CanvasRenderingContext2D} */
        const ctx = canvas.getContext("2d");
        const style = {
            top: window.innerHeight/2,
            left: window.innerWidth/2,
        };
        /**@type {Coords} */
        const bcoords = {
            x: (abs_zoomRatio*coords.x - style.left)/abs_zoomRatio,
            y: (abs_zoomRatio*coords.y - style.top)/abs_zoomRatio,
        };
    
        zoomRatio = abs_zoomRatio;
        backcanvas.canvas.coords = bcoords;
        moveMapAssistingNegative(canvas, ctx, { left: 0, top: 0 });
        setBehavParam();
    }
    
    //@ts-check
    "use strict";
    
    
    /**
     * @typedef {import("../shishiji-dts/motion").Position} _Position
     * @typedef {import("../shishiji-dts/motion").Radian} Radian
     * @typedef {import("../shishiji-dts/motion").MoveData} MoveData
     */
    
    
    /**
     * 
     * @param {TouchList | MouseEvent} y 
     */
    function setCursorpos(y){
        if (y instanceof MouseEvent)
            pointerPosition = [ y.clientX, y.clientY ];
        else
            pointerPosition = getMiddlePos(y);
    }
    
    
    /**
     * 
     * @param {TouchList} touches 
     */
    function setTheta(touches){
        prevTheta = getThouchesTheta(touches);
    }
    
    
    /**
     * 
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     * @param {MoveData} moved
     */
    function moveMapAssistingNegative(canvas, ctx, moved){
        const x = backcanvas.canvas.coords.x - moved.left/zoomRatio;
        const y = backcanvas.canvas.coords.y - moved.top/zoomRatio;
    
        backcanvas.canvas.coords = { x: x, y: y };
        backcanvas.canvas.width = canvas.width/zoomRatio;
        backcanvas.canvas.height = canvas.height/zoomRatio;
    
        _redraw(canvas, ctx, backcanvas,
            ...[ backcanvas.canvas.coords.x, backcanvas.canvas.coords.y ],
            backcanvas.canvas.width, backcanvas.canvas.height, 0, 0, canvas.width, canvas.height,
        );
    }
    
    
    /**
     * @deprecated use {@linkcode moveMapAssistingNegative} instead for safari support
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     * @param {MoveData} moved
     */
    function moveMap(canvas, ctx, moved){
        const x = backcanvas.canvas.coords.y-moved.left/zoomRatio;
        const y = backcanvas.canvas.coords.x-moved.top/zoomRatio;
    
        backcanvas.canvas.coords = { x: x, y: y }; 
        backcanvas.canvas.width = canvas.width/zoomRatio;
        backcanvas.canvas.height = canvas.height/zoomRatio;
    
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(backcanvas, backcanvas.canvas.coords.x, backcanvas.canvas.coords.y,
            backcanvas.canvas.width, backcanvas.canvas.height, 0, 0, canvas.width, canvas.height,
        );
    }
    
    
    /**
     * 
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     * @param {number} ratio 
     * @param {NonnullPosition} origin
     *   (cursorPosition)
     * @param {NonnullPosition} [pos]
     * @param {boolean} [forceRatio] 
     */
    function zoomMapAssistingNegative(canvas, ctx, ratio, origin, pos, forceRatio){
        if (willOverflow(ratio, false)) return;
    
        if (pos === void 0)
            pos = [ backcanvas.canvas.coords.x, backcanvas.canvas.coords.y ];
    
        if (forceRatio)
            zoomRatio = ratio;
        else
            zoomRatio *= ratio;
    
        if (origin.length == 2 && ratio != 1){
            /**@type {number[]} */
            var transorigin = [];
            for (var i = 0; i < 2; i++){
                transorigin.push(
                    (origin[i]*(ratio - 1))/(zoomRatio) + pos[i]
                );
            }
            backcanvas.canvas.coords = {
                x: transorigin[0],
                y: transorigin[1]
            };
        }
        backcanvas.canvas.width = canvas.width/zoomRatio; backcanvas.canvas.height = canvas.height/zoomRatio;
    
        _redraw(canvas, ctx, backcanvas,
            backcanvas.canvas.coords.x, backcanvas.canvas.coords.y,
            backcanvas.canvas.width, backcanvas.canvas.height,
            0, 0, canvas.width, canvas.height,
        );
    }
    
    
    /**
     * @deprecated use {@linkcode zoomMapAssistingNegative} instead for safari support
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     * @param {number} ratio 
     * @param {[number, number]} origin
     *   (cursorPosition)
     * @param {[number, number] | undefined} pos
     */
    function zoomMap(canvas, ctx, ratio, origin, pos){
        if (MOVEPROPERTY.caps.ratio.max < zoomRatio && ratio > 1
            || MOVEPROPERTY.caps.ratio.min > zoomRatio && ratio < 1
            ) return;
    
        if (pos === void 0)
            pos = [ backcanvas.canvas.coords.x, backcanvas.canvas.coords.y ];
    
        zoomRatio *= ratio;
    
        if (origin.length == 2 && ratio != 1){
            var transorigin = [];
            for (var i = 0; i < 2; i++){
                transorigin.push(
                    (origin[i]*(ratio - 1))/(zoomRatio) + pos[i]
                );
            }
            backcanvas.canvas.coords = {
                x: transorigin[0],
                y: transorigin[1]
            };
        }
        backcanvas.canvas.width = canvas.width/zoomRatio; backcanvas.canvas.height = canvas.height/zoomRatio;
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(backcanvas,
            backcanvas.canvas.coords.x, backcanvas.canvas.coords.y, backcanvas.canvas.width, backcanvas.canvas.height,
            0, 0, canvas.width, canvas.height,
        );
    }
    
    
    /**
     * iOS browser doesn't get empty of backcanvas.
     * Fill empty in main canvas when caught negative coords.
     * 
     * USE:: `_redraw(canvas, ctx, backcanvas,
     *      backcanvas.canvas.coords.x, backcanvas.canvas.coords.y,
     *      backcanvas.canvas.width, backcanvas.canvas.height, 0, 0, canvas.width, canvas.height);`
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     * @param {CanvasImageSource} image 
     * @param {number} sx 
     * @param {number} sy 
     * @param {number} sw 
     * @param {number} sh 
     * @param {number} dx 
     * @param {number} dy 
     * @param {number} dw 
     *   canvas width
     * @param {number} dh 
     *   canvas height
     */
    function _redraw(canvas, ctx, image, sx, sy, sw, sh, dx, dy, dw, dh){
        /**@type {NonnullPosition} */
        const canvasCoords = [sx, sy];
        /**@type {NonnullPosition} */
        var transCoords;
        /**@type {number[]} */
        var args;
    
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    
        if (sx < 0 || sy < 0){
            transCoords = canvasCoords.map(
                n => { return -n; }
            );
            args = [
                0, 0,
                backcanvas.canvas.width - transCoords[0],
                backcanvas.canvas.height - transCoords[1],
                transCoords[0]*zoomRatio,
                transCoords[1]*zoomRatio,
                dw - transCoords[0]*zoomRatio,
                dh - transCoords[1]*zoomRatio
            ];
        } else {
            args = [ sx, sy, sw, sh, dx, dy, dw, dh ];
        }
    
        //@ts-ignore
        ctx.drawImage(image, ...args);
    
        updatePositions();
    }
    
    
    /**
     * 
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     * @param {NonnullPosition} origin 
     * @param {number} [rotation] 
     */
    function rotateCanvas(canvas, ctx, origin, rotation){
        if (rotation === void 0){
            rotation = backcanvas.canvas.rotation;
        }
        
        var d = backcanvas.toDataURL();
        var _img = new Image();
    
        _img.src = d;
    
        bctx.clearRect(0, 0, backcanvas.width, backcanvas.height);
        bctx.translate(origin[0] * zoomRatio, origin[1] * zoomRatio);
        bctx.rotate(rotation);
        bctx.translate(-origin[0] * zoomRatio, -origin[1] * zoomRatio);
        
        _img.onload = function(e){
            bctx.drawImage(_img, 0, 0);
        }
    
        _redraw(canvas, ctx, backcanvas, backcanvas.canvas.coords.x, backcanvas.canvas.coords.y,
            backcanvas.canvas.width, backcanvas.canvas.height,
            0, 0, canvas.width, canvas.height
        );
    
        backcanvas.canvas.rotation += rotation;
    }
    
    //@ts-check
    "use strict";
    
    
    /**
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     * @param {TouchEvent} event 
     * @returns {{diffRatio: number, crossPos: NonnullPosition, rotation: Radian}}
     */
    function touchZoom(canvas, ctx, event){
        /**@type {NonnullPosition} */
        var crossPos = [ -1, -1 ];
        const abs = Math.abs;
        const touches = event.touches;
    
    
        zoomCD++;
        const Fx = {
            previous: {
                slope: (prevTouchINFO.real[0].clientY - prevTouchINFO.real[1].clientY) / (prevTouchINFO.real[0].clientX - prevTouchINFO.real[1].clientX),
            },
            this: {
                slope: (touches[0].clientY - touches[1].clientY) / (touches[0].clientX - touches[1].clientX),
            }
        };
    
        const distance = getMidestOfTouches(touches);
        var diffRatio = distance / previousTouchDistance.distance;
    
        if (previousTouchDistance.x == -1 && previousTouchDistance.y == -1 && previousTouchDistance.distance == -1){
            diffRatio = 1;
        }
    
        previousTouchDistance.distance = distance;
    
        //#region 
        if (Fx.previous.slope == Fx.this.slope){
            var D1 = touches[0].clientX - prevTouchINFO.touches[0].x;
            var D2 = touches[1].clientX - prevTouchINFO.touches[1].x;
    
            (D1 === 0 && D2 === 0 || D1 + D2 == 0) ? D1 = D2 = 1 : void 0;
    
            const R = D1 / (abs(D1) + abs(D2));
    
            const addD1x = abs(touches[0].clientX - touches[1].clientX) * R;
            const addD1y = abs(touches[0].clientY - touches[1].clientY) * R;
    
            /**@type {NonnullPosition} */
            const middle = [
                touches[0].clientX + addD1x,
                touches[0].clientY + addD1y,
            ];
            
            prevTouchINFO.middle = middle;
        } else {
            const crossX = (
                    prevTouchINFO.real[0].clientX * Fx.previous.slope - touches[0].clientX * Fx.this.slope
                    - prevTouchINFO.real[0].clientY + touches[0].clientY
                )
                    /
                (Fx.previous.slope - Fx.this.slope);
            const crossY = (
                Fx.this.slope * (crossX - touches[0].clientX) + touches[0].clientY
            );
            
            crossPos = [ Math.ceil(crossX), Math.ceil(crossY) ];
    
            if (!crossPos.some(t => { return isNaN(t) })) 0;
        }
        //#endregion
    
        if (willOverflow(diffRatio, false)) diffRatio = 1;
    
        const prevOrigin = getMiddlePos(prevTouchINFO.real);
        const currentOrigin = getMiddlePos(touches);
        const x1d = prevOrigin[0] * diffRatio;
        const y1d = prevOrigin[1] * diffRatio;
        const diffx = currentOrigin[0] - x1d;
        const diffy = currentOrigin[1] - y1d;
    
    
        if (zoomCD > MOVEPROPERTY.touch.zoomCD){
            zoomMapAssistingNegative(canvas, ctx, diffRatio, [ 0, 0 ]);
            moveMapAssistingNegative(canvas, ctx, {
                top: diffy,
                left: diffx
            });
        }
    
    
        /**@type {Radian} */
        var rotation = 0;
        //#region 
        /**
         * can't use this
         */
        function _rotateHandler(){
            const PI = Math.PI;
            const theta = getThouchesTheta(touches);
    
            if (prevTheta === -1)
                rotation = 0;
            else if (
                0 <= prevTheta && prevTheta <= PI
                    &&
                PI*(3/2) <= theta && theta <= 2*PI
                )
                rotation = -(2*PI - theta + prevTheta);
            else if (
                0 <= theta && theta <= PI
                    &&
                PI*(3/2) <= prevTheta && prevTheta <= 2*PI
                )
                rotation = 2*PI - prevTheta + theta;
            else 
                rotation = theta - prevTheta;
    
            prevTheta = theta;
    
    
            totalRotateThisTime += Math.abs(rotation);
            rotatedThisTime += rotation;
    
    
            if (Math.abs(rotatedThisTime) > toRadians(MOVEPROPERTY.touch.rotate.min) || pastRotateMin){
                if (!pastRotateMin){
                    rotatedThisTime -= toRadians(MOVEPROPERTY.touch.rotate.min);
                }
                pastRotateMin = true;
                if (zoomCD > MOVEPROPERTY.touch.zoomCD)
                    rotateCanvas(canvas, ctx, crossPos, rotation);
            }
            
    
            rotatedThisTime += rotation;
        }
        //#endregion
    
        return { diffRatio: diffRatio, crossPos: crossPos, rotation: rotation };
    }
    
    
    /**
     * 
     * @param {TouchEvent} event 
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     */
    function onTouchMove(event, canvas, ctx){
        const touches = event.touches;
        const pos = getMiddlePos(touches);
        const prevp = pointerPosition;
    
        /**@type {{diffRatio: number, crossPos: NonnullPosition, rotation: Radian}} */
        var adjust = { diffRatio: 1, crossPos: [ -1, -1 ], rotation: 0 };
    
    
        pointerPosition = pos;
    
    
        if (touchCD < MOVEPROPERTY.touch.downCD){
            touchCD++;
            return;
        }
        
    
        if (touches.length >= 2 && prevTouchINFO.real !== void 0 && prevTouchINFO.real.length >= 2){
            /**@see {@link (./eventCalcu.js).touchZoom} */
            adjust = touchZoom(canvas, ctx, event);
            prevTouchINFO.zoom = true;
        } else {
            pastRotateMin = false;
            rotatedThisTime = 0;
            totalRotateThisTime = 0;
            prevTheta = -1;
            zoomCD = 0;
            prevTouchINFO.cross = [ -1, -1 ];
    
            function frict(){
                var touch_0 = { clientX: prevTouchINFO.real[0].clientX, clientY: prevTouchINFO.real[0].clientY, velocity: touchZoomVelocity[0] };
                var touch_1 = { clientX: prevTouchINFO.real[1].clientX, clientY: prevTouchINFO.real[1].clientY, velocity: touchZoomVelocity[1] };
    
                !function(touch_0, touch_1){
                    const orig = [ touch_0, touch_1 ];
                    const a = touchZoomVelocity.a;
    
                    function i(n){
                        return n < 0 ? -1 : 1;
                    }
                    if (zoomFrictInterval !== null)
                        clearInterval(zoomFrictInterval);
            
                    if (isNaN(touch_0.velocity.x) || isNaN(touch_0.velocity.y)
                        || isNaN(touch_1.velocity.x) || isNaN(touch_1.velocity.y)
                        )
                        return 0;
            
                    //@ts-ignore
                    zoomFrictInterval = setInterval(() => {
                        touch_0.velocity.x += i(touch_0.velocity.x)*a;
                        touch_0.velocity.y += i(touch_0.velocity.y)*a;
                        touch_1.velocity.x += i(touch_1.velocity.x)*a;
                        touch_1.velocity.y += i(touch_1.velocity.y)*a;
    
                        touch_0.clientX += touch_0.velocity.x;
                        touch_0.clientY += touch_0.velocity.y;
                        touch_1.clientX += touch_1.velocity.x;
                        touch_1.clientY += touch_1.velocity.y;
    
                        touchZoom(canvas, ctx, {
                            touches: [
                                //@ts-ignore
                                touch_0, touch_1,
                            ],
                        });
                        if (touch_0.velocity.x*orig[0].velocity.x <= 0 &&
                            touch_0.velocity.y*orig[0].velocity.y <= 0 &&
                            touch_1.velocity.x*orig[1].velocity.x <= 0 &&
                            touch_1.velocity.y*orig[1].velocity.y <= 0
                            )
                            //@ts-ignore
                            clearInterval(zoomFrictInterval);
                    }, 1);
                    return 0;
                }(touch_0, touch_1);
            }
            if (false)
                frict();
    
            prevTouchINFO.zoom = false;
        }
    
    
        if (!prevp.some(t => t === null) && touches.length == 1){
            //@ts-ignore
            const map_move = { left: pos[0] - prevp[0], top: pos[1] - prevp[1] };
            moveMapAssistingNegative(canvas, ctx, map_move);
        }
    
        prevTouchINFO.cross = adjust.crossPos;
        savePrevTouches(touches);
    }
    
    //@ts-check
    "use strict";
    
    
    /**
     * Zoom canvas by scrolling mouse wheel
     * @param {WheelEvent} e 
     * @param {HTMLCanvasElement} canvas 
     */
    function canvasonScroll(e, canvas){
        var delta = MOVEPROPERTY.scroll * 1;
        if (e.deltaY > 0)
            delta = 1/delta;
        //@ts-ignore
        zoomMapAssistingNegative(canvas, canvas.getContext("2d"), delta, cursorPosition);
    }
    
    
    /**
     * 
     * @param {MouseEvent} e 
     * @param {HTMLCanvasElement} canvas 
     * @param {CanvasRenderingContext2D} ctx 
     */
    function onMouseMove(e, canvas, ctx){
        /**@type {NonnullPosition} */
        const pos = [ e.clientX, e.clientY ];
        //@ts-ignore
        const moved = { left: pos[0] - pointerPosition[0], top: pos[1] - pointerPosition[1] };
    
        moveMapAssistingNegative(canvas, ctx, moved);
        pointerPosition = pos;
    }
    
    //@ts-check
    "use strict";
    
    
    /**
     * @typedef {import("../shishiji-dts/objects").mapObjElement} mapObjectElement
     * @typedef {import("../shishiji-dts/objects").mapObject} mapObject
     */
    
    
    /**
     * use /scripts/coords.py to find coordinate
     * @param {mapObject} objectData 
     */
    function putMobjonMap(objectData){
        /**@ts-ignore @type {HTMLElement} */
        const viewer = document.getElementById("shishiji-view");
        /**@ts-ignore @type {HTMLElement} */
        const overview = document.getElementById("shishiji-overview");
        const behavior = objectData.object.type.behavior;
        const orgname = objectData.discriminator;
        var zIndex = 1001;
        
        const objectCoords_fromCanvas = {
            x: (objectData.object.coordinate.x - backcanvas.canvas.coords.x) * zoomRatio,
            y: (objectData.object.coordinate.y - backcanvas.canvas.coords.y) * zoomRatio,
        };
        var styles = "";
        var attrs = "";
        var classes = "";
        var dfcursor = "pointer";
        const obj_id = formatString(objectIdFormat, orgname);
        const pathConverter = getPathConverter(objectData);
        const iconsrc = pathConverter(orgname, objectData.object.images.icon);
    
    
        switch (behavior){
            case "dynamic":
                classes += "popups realshadow ";
                break;
            default:
            case "static":
                zIndex = 999;
                classes += "mapObj_static";
                if (!objectData.object.type.border)
                    styles += "border: none; border-radius: 0; background-color: transparent;";
                if (!objectData.article){
                    styles += "cursor: default; pointer-events: none;";
                    dfcursor = "default";
                }
                break;
        }
    
    
    
        const element_outerHTML = `
            <div id="${obj_id}" class="mpob centeral" style="top: ${objectCoords_fromCanvas.y}px; left: ${objectCoords_fromCanvas.x}px; z-index: ${zIndex};"
                coords="${objectData.object.coordinate.x} ${objectData.object.coordinate.y}"
                behavior="${objectData.object.type.behavior}"
                dfsize="${objectData.object.size.width} ${objectData.object.size.height}">
                <div class="canvas_interactive mpobmctx ${classes}" style="background-image:url('${iconsrc}');
    min-width:${objectData.object.size.width}px;min-height:${objectData.object.size.height}px;max-width:${objectData.object.size.width}px;max-height:${objectData.object.size.height}px;${styles}" dfcs="${dfcursor}">
                </div>
            </div>
        `;
    
        $(viewer).append(element_outerHTML)
        const el = $(viewer).children()[$(viewer).children().length - 1];
        if (objectData.article){
            listenInterOnEnd(el, function(e){
                const eventDetails = objectData;
                
                raiseOverview();
                writeArticleOverview(eventDetails, true);
    
                setParam(ParamName.ARTICLE_ID, objectData.discriminator);
                setBehavParam();
            }, { forceLeft: true });
        }
    }
    
    
    function clearObj(){
        $(".mpob").remove();
    }
    
    
    /**
     * 
     * @param {HTMLCanvasElement} canvas 
     */
    function grayScaledCanvas(canvas){
        /**@ts-ignore @type {CanvasRenderingContext2D}*/
        var ctx = canvas.getContext("2d");
            
        var canvasWidth = canvas.width;
        var canvasHeight = canvas.height;
        
        /**@ts-ignore @type {ImageData}*/
        var imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);
        var data = imageData.data;
        
        for (var i = 0; i < data.length; i += 4){
            data[i] *= 0.75;
            data[i + 1] *= 0.75;
            data[i + 2] *= 0.75;
        }
        
        ctx.putImageData(imageData, 0, 0);
    }
    
    
    /**
     * 
     * @param {HTMLCanvasElement} canvas 
     */
    function normalCanvas(canvas){
        /**@ts-ignore @type {CanvasRenderingContext2D}*/
        var ctx = canvas.getContext("2d");
            
        var canvasWidth = canvas.width;
        var canvasHeight = canvas.height;
        
        /**@ts-ignore @type {ImageData}*/
        var imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);
        var data = imageData.data;
        
        for (var i = 0; i < data.length; i += 4){
            data[i] /= 0.75;
            data[i + 1] /= 0.75;
            data[i + 2] /= 0.75;
        }
        
        ctx.putImageData(imageData, 0, 0);
    }
    
    
    /**
     * 
     * @param {string} currentfloor 
     * @param {mapObjComponent} objects 
     */
    function showDigitsOnFloor(currentfloor, objects){
        for (const y in objects){
            if (objects[y].object.floor == currentfloor){
                putMobjonMap(objects[y]);
            }
        }
    }
    
    //@ts-check
    "use strict";
    
    
    function updatePositions(){
        for (var _mapObj of document.getElementsByClassName("mpob")){
            /**@ts-ignore @type {mapObjectElement} */
            const mapObj = _mapObj;
            const coords = getCoords(mapObj);
    
            const objectCoords_fromCanvas = {
                x: (coords.x - backcanvas.canvas.coords.x) * zoomRatio,
                y: (coords.y - backcanvas.canvas.coords.y) * zoomRatio,
            };
    
            var behavior = getBehavior(mapObj);
            const dfsize = getDefaultSize(mapObj);
    
            var size = dfsize;
    
            if (behavior == "dynamic"){
                if (zoomRatio > MOVEPROPERTY.object.dynamic_to_static.over) behavior = "dynatic";
                if (zoomRatio < MOVEPROPERTY.object.dynamic_to_static.under) behavior = "_dynatic";
            }
    
            switch (behavior){
                case "static":
                    size.width = dfsize.width*zoomRatio;
                    size.height = dfsize.height*zoomRatio;
                    break;
                case "dynatic":
                    size.width = dfsize.width*(zoomRatio / MOVEPROPERTY.object.dynamic_to_static.over);
                    size.height = dfsize.height*(zoomRatio / MOVEPROPERTY.object.dynamic_to_static.over);
                    break;
                case "_dynatic":
                    size.width = dfsize.width*(zoomRatio / MOVEPROPERTY.object.dynamic_to_static.under);
                    size.height = dfsize.height*(zoomRatio / MOVEPROPERTY.object.dynamic_to_static.under);
                    break;
                case "dynamic":
                default:
    
                    break;
            }
    
            mapObj.style.top = objectCoords_fromCanvas.y+"px";
            mapObj.style.left = objectCoords_fromCanvas.x+"px";
            
            $($(mapObj).children()[0])
                .css("min-width", size.width+"px")
                .css("min-height", size.height+"px")
                .css("max-width", size.width+"px")
                .css("max-height", size.height+"px");
        }
    }
    
    //@ts-check
    "use strict";
    
    
    function raiseOverview(){
        strictMap();
        /**@ts-ignore @type {HTMLElement} */
        const overview = document.getElementById("shishiji-overview");
        const $cp = $("#shishiji-popup-container-c");
    
        overview.style.top = "0vh";
        $(overview)
        .removeClass("reducedown")
        .addClass("raiseup")
        .scrollTop(0);
        $(overview).show();
        $("#overview-share").show();
        $("#overview-close-c").on("click", (e) => {
            e.preventDefault();
            reduceOverview();
        });
        $("#overview-share-c").on("click", (e) => {
            e.preventDefault();
            shareContent();
        });
    
        function shareContent(){
            const discriminator = getParam(ParamName.ARTICLE_ID);
            const data = searchObject(discriminator);
            const _url = new URL(window.location.href);
            var shareURL = `${_url.origin}${_url.pathname.replace(/@.*/, "")}?${ParamName.FLOOR}=${CURRENT_FLOOR}&${ParamName.ARTICLE_ID}=${discriminator}`;
    
            if (data == null || discriminator == null){
                console.log(data, discriminator)
                openSharePopup({ title: "" }, "", {}, "", "", {labelkey: "", url: ""}, true);
                return;
            }
    
            const message = `${TEXT[LANGUAGE].SHARE_EVENT_MESSAGE} ${data.article.title}`;
            
            openSharePopup(
                {
                    title: TEXT[LANGUAGE].SHARE_EVENT_POPUP_TITLE,
                    subtitle: TEXT[LANGUAGE].SHARE_EVENT_POPUP_SUBTITLE,
                },
                shareURL,
                {
                    title: TEXT[LANGUAGE].SHARE_EVENT_DATA_TITLE,
                    text: `${message}\n{__SHARE_URL__}`,
                },
                /**
                 * jump to the object screened on middle of window
                 */
                ParamValues.FROM_ARTICLE_SHARE,
                message,
                {
                    labelkey: "SHARE_EVENT_INCLUDE_EVTH",
                    // activve element id match
                    url: `${shareURL}&${ParamName.SCROLL_POS}=${$("#shishiji-overview").scrollTop()}&${ParamName.ART_TARGET}=${$(".tg-active")[0].id.match(/ovv-t-(.*?)-sd/)?.[1]}`,
                }
            );
        }
    }
    
    
    function strictMap(){
        clearInterval(Intervals.reduceOverview);
        $("#user-stricter")
        .removeClass("deactive")
        .addClass("active")
        .show();
    }
    
    
    function restrictMap(){
        clearTimeout(Intervals.restrict);
        $("#user-stricter")
        .removeClass("active");
        Intervals.restrict = setTimeout(() => {
            $("#user-stricter")
            .hide();
        }, 195);
    }
    
    
    function reduceOverview(){
        restrictMap();
        /**@ts-ignore @type {HTMLElement} */
        const overview = document.getElementById("shishiji-overview");
        overview.style.top = "100vh";
        $(overview)
        .removeClass("raiseup")
        .addClass("reducedown");
        $("#overview-close").off("click", reduceOverview);
        $("#overview-context").removeClass("fadein");
    
        $(".tg-active").removeClass("tg-active");
        
        Intervals.reduceOverview = setTimeout(() => {
            writeOverviewContent(`<div id="ovv-ctx-loading-w" class="protected"><h4 id="ovv-ctx-loading">処理中...</h4></div>`, );
            $(overview)
            .css("border-top", "20px solid white")
            .scrollTop(0)
            .hide();
        }, 190);
    
        delParam(ParamName.ARTICLE_ID);
    }
    
    
    /**
     * 
     * @param {mapObject} details 
     * @param {boolean} fadein 
     * @param {number} [scroll_top]
     * @param {string} [target] 
     * @param {boolean} [FORCE] 
     */
    function writeArticleOverview(details, fadein, scroll_top, target, FORCE){
        /**@ts-ignore @type {HTMLElement} */
        const ctx = document.getElementById("overview-context");
        /**@ts-ignore @type {HTMLElement} */
        const overview  = document.getElementById("shishiji-overview");
        const color = (details.article.theme_color) ? details.article.theme_color : "black";
        const font = (details.article.font_family) ? details.article.font_family : "";
        const orgname = details.discriminator;
        const pathConvertfunc = getPathConverter(details);
    
        /**
         * 
         * @param {"h" | "i"} a 
         */
        function onerror(a){
            if (a == "h")
                this.outerHTML = `<div class="flxxt nImg-a">${GPATH.ERROR_ZAHUMARU}<h4>No Image</h4></div>`;
            else if (a == "i")
                this.outerHTML = `<div class="flxxt" style="width:48px;height:48px;">${GPATH.ERROR_ZAHUMARU}</div>`;
        };
    
        var article_mainctx = mcFormat(details.article.content, fn => { return pathConvertfunc(orgname, fn); });
    
        if (!window.navigator.onLine){
            Notifier.notifyHTML(
                `<div id="shr-notf" class="flxxt" style="font-size: 12px;">${GPATH.ERROR}${TEXT[LANGUAGE].NOTIFICATION_CONNECTION_ERROR}</div>`,
                2500,
                "article connection error",
                true,
            );
            $("#ovv-ctx-loading").html(`<div class="flxxt"><div style="width:40%;">${GPATH.ERROR_ZAHUMARU}</div></div>${TEXT[LANGUAGE].ARTICLE_CONNECTION_ERROR}`);
            $("#overview-share").hide();
            return;
        }
        
        if (article_mainctx === "<span></span>"){
            article_mainctx = `<h4 style="width: 100%; margin-top: 50px; margin-bottom: 50px; text-align: center;">${TEXT[LANGUAGE].ARTICLE_NO_ARTICLE}</h4>`;
        }
    
        var custom_tr = "";
    
        for (var tr of details.article.custom_tr){
            if (tr.title && tr.content)
                custom_tr += `
                    <tr class="ev_property">
                        <th class="ev_property_cell" aria-label="${tr.title}">
                            ${tr.title}
                        </th>
                        <th class="ev_property_cell" aria-label="${tr.content}">
                            ${tr.content}
                        </th>
                    </tr>
                `;
        }
    
        if (fadein)
            $(ctx).addClass("fadein");
        
        overview.style.borderTop = "solid var(--shishiji-ovv-theme-height) "+color;
        $(overview).css("font-family", font);
    
        const EVENT_HEADER = `<img id="--art-header" class="article-image article header" alt="" aria-label="${TEXT[LANGUAGE].ARIA_ARTICLE_HEADER}"><div class="article titleC"><img id="--art-icon" class="article-image" style="width: 48px" alt="" aria-label="${TEXT[LANGUAGE].ARIA_ARTICLE_ICON}"><h1 id="ctx-title" style="margin: 5px; font-family: var(--font-view);">${escapeHTML(details.article.title)}</h1></div>`;
    
        function __onload(){
            setTimeout(
                (
    
            ) => {
                $("#overview-context").addClass("_fadein");
                if (scroll_top !== void 0)
                    $("#shishiji-overview").scrollTop(scroll_top);
                scroll_top = 0;
            }, 25);
        }
    
        class ctx_article_C{
            static get exists(){
                return document.getElementById("ctx-article") ? true : false;
            }
    
            /**@param {string} _html @param {() => void} [cb] */
            static async write(_html, cb){
                const r = document.getElementById("ctx-article");
                if (r)
                    r.innerHTML = _html;
                if (cb)
                    cb();
            }
        };
    
        /**@this {HTMLElement} */
        function showDescription(){
            if ($(this).hasClass("tg-active") && !FORCE)
                return;
    
            $("#overview-context").addClass("_wait_f");
    
            const _html__w = `
            <div class="ev_property ev_ppar">
                <p style="font-family: var(--font-view);">▷${TEXT[LANGUAGE].ARTICLE_CORE_GRADE}: ${details.article.core_grade}</p>
            </div>
            ${article_mainctx}
            `;
            if (ctx_article_C.exists)
                ctx_article_C.write(_html__w, __onload);
            else
                writeOverviewContent(
                    `${EVENT_HEADER}<div id="ctx-article" class="article">${_html__w}</div>`, __onload);
            if (fadein)
            $("#overview-context").removeClass("fadein").removeClass("_fadein");
            $(".tg-active").removeClass("tg-active");
            $(this).addClass("tg-active");
            $(".article-image").addClass("doaJSD");
            $("#--art-header").on("error", function(){ onerror.apply(this, ["h"]); }).attr("src", pathConvertfunc(orgname, details.article.images.header));
            $("#--art-icon").on("error", function(){ onerror.apply(this, ["i"]); }).attr("src", pathConvertfunc(orgname, details.object.images.icon));
        }
    
        /**@this {HTMLElement} */
        function showDetails(){
            if ($(this).hasClass("tg-active") && !FORCE)
                return;
    
            $("#overview-context").addClass("_wait_f");
    
            const __htmlw = `
            <hr style="margin: 40px 20px 20px 20px;">
            <div class="ev_property">
                <table style="width: 100%;">
                    <tbody>
                        <tr class="ev_property">
                            <th class="ev_property_cell" aria-label="開催場所">
                                開催場所
                            </th>
                            <th class="ev_property_cell" aria-label="${details.article.venue}">
                                ${details.article.venue}
                            </th>
                        </tr>
                        <tr class="ev_property">
                            <th class="ev_property_cell">
                                開催時間
                            </th>
                            <th class="ev_property_cell">
                                ${details.article.schedule}
                            </th>
                        </tr>
                        ${custom_tr}
                        <tr class="ev_property">
                            <th class="ev_property_cell">
                                予想待ち時間
                            </th>
                            <th class="ev_property_cell" aria-label="${details.article.crowd_status.estimated}分">
                                ${details.article.crowd_status.estimated}分
                            </th>
                        </tr>
                    </tbody>
                </table>
                <div class="crowded_lim">
                    <p style="font-weight: bold; margin: 10px; margin-top: 0; margin-bottom: 5px;" aria-label="混み具合">
                        混み具合
                    </p>
                    <div class="crowded_deg_bar"></div>
                    <div id="crowed_pointer" style="position: relative;">
                        <div class="ccENTER_B" style="position: absolute; left: ${details.article.crowd_status.level}%;">
                            <span class="material-symbols-outlined"
                                style="position: absolute; margin-top: 5px;">
                                north
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <hr style="margin: 20px;">
            `;
            if (ctx_article_C.exists)
                ctx_article_C.write(__htmlw, __onload);
            else
                writeOverviewContent(`${EVENT_HEADER}<div id="ctx-article" class="article">${__htmlw}</div>`, __onload);
    
            $("#overview-context").removeClass("fadein").removeClass("_fadein");
            $(".tg-active").removeClass("tg-active");
            $(this).addClass("tg-active");
            $(".article-image").addClass("doaJSD");
            $("#--art-header").on("error", function(){ onerror.apply(this, ["h"]); }).attr("src", pathConvertfunc(orgname, details.article.images.header));
            $("#--art-icon").on("error", function(){ onerror.apply(this, ["i"]); }).attr("src", pathConvertfunc(orgname, details.object.images.icon));
        }
    
        $("#ovv-t-description-sd").off("click", Ovv_tg_listener.description).on("click", showDescription);
        $("#ovv-t-details-sd").off("click", Ovv_tg_listener.details).on("click", showDetails);
        Ovv_tg_listener.description = showDescription;
        Ovv_tg_listener.details = showDetails;
    
        if (!target || !["description", "details", "else"].includes(target))
            target = "description";
        
        document.getElementById(`ovv-t-${target}-sd`)?.dispatchEvent(new Event("click"));
    }
    
    
    /**
     * 
     * @param {string} ctx
     * @param {() => void} [callback] 
     */
    async function writeOverviewContent(ctx, callback){
        new Promise((resolve, reject) => {
            $("#overview-context").html(ctx);
            resolve("");
        }).then(() => {
            if (callback !== void 0)
                callback();
        });
    }
    
    function init(){
        /**@ts-ignore @type {HTMLElement} */
        const overview  = document.getElementById("shishiji-overview");
        const closebtn = document.getElementById("overview-close");
    }
    
    //@ts-check
    "use strict";
    
    
    /**
     * 
     * @this {JQuery<HTMLElement>}
     * @param {boolean} openned 
     */
    function toggleFeslOn(openned){
        if (!openned){
            this
            .removeClass("toSel undoSel")
            .addClass("toSel popped");
            $("#place-options-w")
            .show()
            .removeClass("toSel undoSel")
            .addClass("toSel");
        } else {
            this
            .addClass("undoSel")
            .removeClass("popped");
            $("#place-options-w").addClass("undoSel");
        }
    }
    
    
    function setPlaceSelColor(p){
        if (p === void 0) p = CURRENT_FLOOR;
        $(".placeOpt").each(function(index, elm){
            if (!this.textContent) return;
            const text = this.textContent?.replace(/ /g, "").replace(/\n/g, "");
            if (text === p)
                $(this).css("background-color", overlay_modes.fselector.colors.current);
            else if (text.length > 1)
                $(this).css("background-color", overlay_modes.fselector.colors.else);
        });
    }
    
    
    /**
     * 
     * @param {string} floor 
     * @param {DrawMapData} data 
     * @param {() => void} [callback] 
     */
    function changeFloor(floor, data, callback){
        /**@ts-ignore @type {HTMLElement} */
        const fselector = document.getElementById("place-selector");
        /**@ts-ignore @type {HTMLCanvasElement} */
        const canvas = document.getElementById("shishiji-canvas");
        /**@ts-ignore @type {CanvasRenderingContext2D} */
        const ctx = canvas.getContext("2d");
    
    
        startLoad(TEXT[LANGUAGE].LOADING_MAP);
        toggleFeslOn.apply($(fselector), [true]);
        overlay_modes.fselector.opened = false;
    
        const data_size = {
            width: data.tile_width*(data.xrange+1),
            height: data.tile_height*(data.yrange+1)
        };
        backcanvas.width = data_size.width;
        backcanvas.height = data_size.height;
        drawMap(canvas, ctx, data, function(){
            backcanvas.canvas.coords = {
                x: 0,
                y: 0
            };
            zoomRatio = 1;
            moveMapAssistingNegative(canvas, ctx, { left: 0, top: 0 });
            clearObj();
            showDigitsOnFloor(floor, mapObjectComponent);
            endLoad(TEXT[LANGUAGE].MAP_LOADED);
            if (callback !== void 0)
                callback();
        });
        CURRENT_FLOOR = floor;
        setParam(ParamName.FLOOR, CURRENT_FLOOR);
        setPlaceSelColor();
    }
    
    //@ts-check
    "use strict";
    
    
    /**
     * 
     * @param {{title: string, subtitle?: string}} ovvOptions 
     * @param {string} share_url 
     * @param {ShareData} share_data 
     *      share_data.text?.replace("{__SHARE_URL__}", finalShareURL<decoded>);
     * @param {string} from_where 
     * @param {string} message 
     * @param {{labelkey: string, url: string}} [change_option] 
     * @param {boolean} [ERROR] 
     */
    function openSharePopup(ovvOptions, share_url, share_data, from_where, message, change_option, ERROR){
        Popup.startLoad();
        share_url = decodeURIComponent(share_url);
        /**@param {string} [ctx]  */
        function onerr(ctx){
            if (ctx === void 0) ctx = TEXT[LANGUAGE].ERROR_ANY;
            Notifier.notifyHTML(
                `<div id="shr-notf" class="flxxt" style="font-size: 12px;">${GPATH.ERROR}${TEXT[LANGUAGE].NOTIFICATION_ERROR_ANY}</div>`,
                2500,
                "sharePopup connection error",
                true,
            );
            if (Popup.popupping)
                Popup.showasError(ctx);
        }
    
        /**
         * 
         * @param {string} url 
         * @param {string} pn 
         * @param {string} pv 
         */
        function adp(url, pn, pv){
            return url.includes("?") ? `${url}&${pn}=${pv}` : `${url}?${pn}=${pv}`;
        }
        
        $.ajax({
            url: "/resources/html-ctx/share.html",
            method: "GET",
            timeout: 30000,
            dataType: "html",
        }).done(t => {
            if (Popup.popupping){
                Popup.popupContent(t, function(){
                    const shareURL = adp(share_url, ParamName.URL_FROM, from_where);
                    var fch = [];
                    var _fchp = {share: () => {}, copy: () => {}};
    
                    if (ERROR){
                        onerr();
                        return;
                    }
    
                    $("#ppc-title").text(ovvOptions.title);
                    if (ovvOptions.subtitle)
                        $("#ppc-subtitle").text(ovvOptions.subtitle);
    
                    /**
                     * 
                     * @param {string} [url] 
                     */
                    function shareShare(url){
                        if (window.navigator.share){
                            share_data.text = share_data.text?.replace("{__SHARE_URL__}", url || shareURL);
                            !function(sd){
                                async function T(){
                                    await window.navigator.share(sd);
                                }
                                $("#share-nav").off("click", _fchp.share).on("click", T);
                                _fchp.share = T;
                                return 0;
                            }(share_data);
                        } else {
                            $("#nav-share").remove();
                        }
                    }
    
                    shareShare();
    
    
                    /**
                     * 
                     * @param {string} [url] 
                     */
                    function copyShare(url){
    
                        function T(){
                            window.navigator.clipboard.writeText(url || shareURL);
                            Notifier.notifyHTML(
                                `<div id="cpy-lin-not" class="flxxt">${GPATH.LINK}${TEXT[LANGUAGE].NOTIFICATION_COPIED_LINK}</div>`,
                                2500,
                                "copy artshare",
                            );
                        }
                        $("#share-copy").off("click", _fchp.copy).on("click", T);
    
                        _fchp.copy = T;
                    }
    
                    copyShare();
    
    
                    if (change_option){
                        $("#includeScr").text(TEXT[LANGUAGE][change_option.labelkey]);
                        $("#includeScrCh").on("change", function(e){
                            //@ts-ignore
                            if (this.checked){
                                for (var i = 0; i < document.getElementsByClassName("share_ebtn").length; i++){
                                    $(document.getElementsByClassName("share_ebtn")[i]).off("click", fch[i]);
                                }
                                const upp = adp(change_option.url, ParamName.URL_FROM, from_where);
                                setShareLink(upp);
                                shareShare(upp);
                                copyShare(upp);
                            } else {
                                setShareLink();
                                shareShare();
                                copyShare();
                            }
                        });
                    } else {
                        $("#includeScrCh").remove();
                    }
                    
                    message = encodeURIComponent(message);
    
    
                    /**
                     * @param {string} [share_url] 
                     */
                    function setShareLink(share_url){
                        const here = encodeURIComponent(share_url || shareURL);
                        const baseText = `${message}%0A${here}`;
                        fch = [];
                        for (const ch of document.getElementsByClassName("share_ebtn")){
                            const appname = ch.id.replace("share-", "");
                            const $ch = $(ch);
                            var href = "";
                            
                            switch (appname){
                                case "line":
                                    href = `http://line.me/R/msg/text/?${baseText}`;
                                    break;
                                case "twitter":
                                    href = `https://x.com/intent/tweet?url=${here}&text=%0A%0A${message}%0A${encodeURIComponent("#獅子児祭 @shishijifes")}%0A&related=shishiji`;
                                    break;
                                case "facebook":
                                    href = `http://www.facebook.com/share.php?u=${here}`;
                                    break;
                                case "gmail":
                                    $("#share-gmail").parent().parent().remove();
                                    href = `https://mail.google.com/mail/?view=cm&body=%0A%0A${baseText}`;
                                    break;
                                case "mail":
                                    href = `mailto:?body=%0A%0A${baseText}`;
                                    break;
                                case "sms":
                                    href = `sms:?body=%0A%0A${baseText}`;
                                    break;
                                case "whatsapp":
                                    href = `https://api.whatsapp.com/send?text=${baseText}`;
                                    break;
                                default:
                                    continue;
                            }
            
                            !function(_href){
                                function lopp(){
                                    window.open(_href, "_blank");
                                }
                                $ch.on("click", lopp);
                                fch.push(lopp);
                                return 0;
                            }(href);
                        }
        
                        /**except japanese */
                        function translate(){
                            $("#--share-bru").text("Share");
                            $("#--trans-MAIL").text("Email");
                            $("#--trans-MESSAGE").text("Messages");
                            $("#--trans-COPYLINK").text("Copy Link");
                            $("#--trans-OTHERS").text("Others");
                        }
                        if (LANGUAGE != "JA")
                            translate();
                    }
    
                    setShareLink();
                });
            }
        })
        .catch(() => { onerr(); });
    }
    
    //@ts-check
    "use strict";
    
    
    /**
     * @typedef {import("../shishiji-dts/objects").NoticeComponent} NoticeComponent
     */
    
    
    class Notifier{
        /**@type {NoticeComponent[]} */
        static pending_notices = [];
    
    
        /**
         * 
         * @param {string} html 
         * @param {number} term 
         *      millisecond
         * @param {string} discriminator
         *      some unique id
         * @param {boolean} [do_not_keep] 
         *      default: false
         * @param {boolean} [user_uncloseable]
         *      default: false 
         * @param {boolean} [_ispendingf] 
         */
        static notifyHTML(html, term, discriminator, do_not_keep, user_uncloseable, _ispendingf){
            const $notifier = $("#--yd-notifier");
            const te = document.createTextNode(html).textContent;        
            
            if (Notifier_prop.notifying && Notifier_prop.current == discriminator && !do_not_keep)
                return;
    
            if (te?.endsWith(".") || te?.endsWith("!") || te?.endsWith("?"))
                html += "&nbsp;";
    
                
            if (!_ispendingf)
                this.clearPengings();
        
            Notifier_prop.current = discriminator;
        
            clearTimeout(Notifier_prop.Timeout);
            clearTimeout(Notifier_prop._Timeout);
            clearTimeout(Notifier_prop.__Timeout);
            
            if (Notifier_prop.notifying){
                this.closeNotifier(true);
                Notifier_prop._Timeout = setTimeout(() => {
                    doOpen.apply(this, [user_uncloseable]);
                }, 75);
                return;
            }
        
    
            /**
             * 
             * @param {boolean} cant_close 
             */
            function doOpen(cant_close){
                $("#--ott-us")
                .html(html);
                $notifier
                .show()
                .removeClass("hpipe")
                .addClass("vpopen");
    
                if (!cant_close){
                    this._add_closeOnInter();
                } else {
                    $notifier.addClass("--path-through");
                }
            
                Notifier_prop.notifying = !0;
            
                Notifier_prop.Timeout = setTimeout(() => {
                    this.closeNotifier(true);
                }, term);
            }
    
            doOpen.apply(this, [user_uncloseable]);
        }
    
    
        /**
         * 
         * @param {boolean} [keep_discriminator] 
         */
        static closeNotifier(keep_discriminator){
            clearTimeout(Notifier_prop.__Timeout);
            $("#--yd-notifier")
            .removeClass("--path-through")
            .removeClass("vpopen")
            .addClass("hpipe");
            
            this._remove_closeOnInter();
    
            Notifier_prop.notifying = false;
            Notifier_prop.__Timeout = setTimeout(() => {
                $("#--ott-us").empty();
                $("#--yd-notifier").hide();
                if (!keep_discriminator)
                    Notifier_prop.current = "";
                if (this.pending_notices.length > 0){
                    const arg = this.pending_notices[0];
                    this.notifyHTML(arg.html, arg.term, arg.discriminator, arg.do_not_keep, arg.user_uncloseable, true);
                    this.pending_notices.shift();
                }
            }, 70);
        }
    
    
        /**
         * 
         * @param {NoticeComponent} arg 
         */
        static appendPending(arg){
            this.pending_notices.push(arg);
        }
    
    
        static clearPengings(){
            this.pending_notices = [];
        }
    
    
        static _add_closeOnInter(){
            const $notifier = $("#--yd-notifier");
            
            $notifier
            .removeClass("--path-through")
            .on("touchstart mousedown", this._interClose);
        }
    
    
        static _remove_closeOnInter(){
            const $notifier = $("#--yd-notifier");
            
            $notifier.off("touchstart mousedown", this._interClose);
        }
    
    
        /**
         * 
         * @param {Event | JQuery.Event} e 
         */
        static _interClose(e){
            e.preventDefault();
            Notifier.closeNotifier();
        }
    }
    
    
    //@ts-ignore
    window.Notifier = Notifier;
    
    //@ts-check
    "use strict";
    
    
    /**
     * @typedef {import("../shishiji-dts/objects").PopupOptions} PopupOptions
     */
    
    
    class Popup{
        /**@see {@link _keydisposal} */
        static closeKeys = [ "ESCAPE", ];
        /**
         * 
         * @param {string} _innerHTML 
         * @param {() => void} [callback] 
         * @param {PopupOptions} [options]
         */
        static async popupContent(_innerHTML, callback, options){
            const ppcls = GPATH.X;
    
            if (options === void 0){
                options = {
                    width: 500,
                    height: 450,
                };
            } else {
                if (!options.width)
                    options.width = 500;
                if (!options.height)
                    options.height = 450;
            }
    
            if (options.hideclosebutton && options.forceclosebutton)
                console.warn("hideclosebutton and forceclosebutton shouldn't be true at same time!!");
    
            if (!options.hideclosebutton)
                _innerHTML = ppcls + _innerHTML;
    
            window.removeEventListener("keydown", this._keydisposal);
            $("shishiji-mx-overlay").off("click", this._dispose);
            return new Promise((resolve, reject) => {
                if (!options?.forceclosebutton){
                    window.addEventListener("keydown", this._keydisposal);
                    $("shishiji-mx-overlay").on("click", this._dispose);
                }
                $("shishiji-mx-overlay")
                .removeClass("pipe")
                .addClass("popen");
                $("#shishiji-popup-container-c")
                .removeClass("flxxt")
                .css("overflow", "")
                .css("height", "")
                .css("width", "")
                //@ts-ignore
                .css("max-width", options.width).css("max-height", options.height).css("left", `calc((var(--window-width) - 48px - min(${options.width}px, var(--window-width) - 48px))/2)`)
                .html(_innerHTML)
                .show();
                resolve("");
            }).then(() => {
                $("#ppcls").on("click", this.disPop);
                if (callback !== void 0)
                    callback();
            });
        }
    
    
        /**
         * 
         * @param {string} src 
         * @param {"img" | "video"} mediatype 
         * @param {() => void} [callback] 
         */
        static async popupMedia(src, mediatype, callback){
            const ppcls = GPATH.X;
            var _html = ppcls;
            
            switch (mediatype){
                case "img":
                    _html += `<img class="suhDWAgd" src="${src}">`;
                    break;
                case "video":
                    _html += `<video class="suhDWAgd" src="${src}" controls preload="metadata" playsinline=""></video>`;
                    break;
            }
    
            return new Promise((resolve, reject) => {
                window.addEventListener("keydown", this._keydisposal);
                $("shishiji-mx-overlay")
                .removeClass("pipe")
                .addClass("popen")
                .on("click", this._dispose);
                $("#shishiji-popup-container-c")
                .addClass("flxxt")
                .css("max-height", "fit-content")
                .css("height", "fit-content")
                .css("overflow", "visible")
                .html(_html)
                .show();
                resolve("");
            }).then(() => {
                $("#ppcls")
                .css("top", "-40px")
                .css("right", "0")
                .on("click", this.disPop);
                /**<path fill="#ffffff"></path> */
                $($($("#ppcls").children()[0]).children()[0])
                .attr("fill", "blue");
    
                if (callback !== void 0)
                    callback();
            });
        }
    
    
        static startLoad(){
            this.popupContent(`<div class="protected" id="ppupds"><div class="mx-text-center flxxt">${Symbol_Span.loadgingsymbol}</div></div>`);
        }
    
    
        /**
         * 
         * @param {string} message 
         */
        static showasError(message){
            this.popupContent(`<div class="protected" id="ppupds"><div class="mx-text-center flxxt" style="flex-direction:column;"><div style="width:125px;margin-bottom:4px;">${GPATH.ERROR_ZAHUMARU}</div><h4>${message}</h4></div></div>`);
        }
        
    
        static disPop(){
            window.removeEventListener("keydown", this._keydisposal);
            $("#ppcls").off("click", this.disPop);
            $("shishiji-mx-overlay")
            .removeClass("popen")
            .addClass("pipe")
            .off("click", this._dispose);
            $("#shishiji-popup-container-c")
            .hide()
            .empty();
        }
    
    
        static get popupping(){
            const me = document.getElementById("shishiji-popup-container-c");
            return ( me?.clientHeight != 0 ) ? true : false;
        }
    
    
        static setsize(){
            const $cp = $("#shishiji-popup-container-c");
    
            /**@param {string} str  */
            function delpxToNum(str){
                return Number(str.replace("px", ""));
            }
    
            const base = {
                width: delpxToNum($cp.css("width")),
                height: delpxToNum($cp.css("height")),
                margin: delpxToNum($cp.css("margin"))
            };
            
            var width = delpxToNum($cp.css("width"));
            var height = delpxToNum($cp.css("height"));
            var margin = delpxToNum($cp.css("margin"));
            
            if (window.innerWidth <= width+margin*2){
                $cp.css("width", window.innerWidth-margin*2+"px");
                width = window.innerWidth-margin*2;
            } else {
                $cp.css("width", base.width+"px");
            }
    
            $cp
            .css("top", (window.innerHeight-(margin*2+height))/2+"px")
            .css("left", (window.innerWidth-(margin*2+width))/2+"px");
        }
    
        
        static _dispose(){
            if (Popup.popupping)
                Popup.disPop();
        }
    
    
        /**
         * 
         * @param {KeyboardEvent} e 
         */
        static _keydisposal(e){
            const key = e.key.toUpperCase();
            if (Popup.closeKeys.includes(key)){
                Popup._dispose();
            }
        }
    }
    
    
    //@ts-ignore
    window.Popup = Popup;
    
    window.addEventListener("load", function(e){
        //@ts-check
        "use strict";
        
        
        !function(){
            /** @ts-ignore @type {HTMLCanvasElement}*/
            const map_wrapper = document.getElementById("shishiji-view");
            /** @ts-ignore @type {HTMLCanvasElement}*/
            const canvas = document.getElementById("shishiji-canvas");
            /** @ts-ignore @type {CanvasRenderingContext2D} */
            const ctx = canvas.getContext("2d");
            /** @ts-ignore @type {HTMLElement}*/
            const fselector = document.getElementById("place-selector");
            /**window.location.href replace timeout */
            var tout = 0;
        
        
            /**
             * @param {Event} e  
             * @returns {boolean}
             */
            function illegal(e){
                const target = e.target;
                //@ts-ignore
                if (target?.classList.contains("canvas_interactive") || target?.tagName.toLowerCase() === "canvas"){
                    return !!0;
                }
                return !0;
            }
        
            window.addEventListener("touchstart", (e) => {
                if (illegal(e))
                    return;
        
                e.preventDefault();
        
                
                clearTimeout(tout);
        
        
                if (overlay_modes.fselector.opened){
                    toggleFeslOn.apply($(fselector), [!0]);
                    overlay_modes.fselector.opened = !!0;
                }
                
                init_friction();
                initTouch(e);
                setCursorpos(e.touches);
        
                if (e.touches.length >= 2)
                    setTheta(e.touches);
            }, { passive: false });
            window.addEventListener("mousedown", (e) => {
                if (illegal(e))
                    return;
        
                e.preventDefault();
        
        
                clearTimeout(tout);
        
                
                if (overlay_modes.fselector.opened){
                    toggleFeslOn.apply($(fselector), [!0]);
                    overlay_modes.fselector.opened = !!0;
                }
        
                init_friction();
                setCursorpos(e);
        
                window.addEventListener("mousemove", mm, { passive: false });
            }, { passive: false });
        
            
        
            window.addEventListener("touchmove", function(e){
                if (illegal(e))
                    return;
                e.preventDefault();
                onTouchMove(e, canvas, ctx);
            }, { passive: false });
        
        
        
            window.addEventListener("touchend", (e) => {
                if (illegal(e))
                    return;
                e.preventDefault();
                initTouch(e);
                DRAGGING = false;
                pointerPosition = [ null, null ];
                frict(pointerVelocity.x, pointerVelocity.y);
            }, { passive: false });
            window.addEventListener("mouseup", mouse_lost, { passive: false });
        
        
            window.addEventListener("wheel", wheel_move, { passive: true });
            window.addEventListener("mousewheel", wheel_move, { passive: true });
        
        
            /**@type {{[key: string]: {pressing: boolean, _do: (arg0: MoveData) => MoveData, _leave: () => void}}} */
            var arrowkeyBehavs = {
                arrowup: {
                    pressing: false,
                    /**@param {MoveData} moves*/
                    _do: function(moves){
                        moves.top += MOVEPROPERTY.arrowkeys.move;
                        return moves;
                    },
                    _leave: function(){
                        frict(0, MOVEPROPERTY.arrowkeys.move*1000/MOVEPROPERTY.arrowkeys.interval);
                    },
                },
                arrowdown: {
                    pressing: false,
                    /**@param {MoveData} moves*/
                    _do: function(moves){
                        moves.top += -MOVEPROPERTY.arrowkeys.move;
                        return moves;
                    },
                    _leave: function(){
                        frict(0, -MOVEPROPERTY.arrowkeys.move*1000/MOVEPROPERTY.arrowkeys.interval);
                    },
                },
                arrowleft: {
                    pressing: false,
                    /**@param {MoveData} moves*/
                    _do: function(moves){
                        moves.left += MOVEPROPERTY.arrowkeys.move;
                        return moves;
                    },
                    _leave: function(){
                        frict(MOVEPROPERTY.arrowkeys.move*1000/MOVEPROPERTY.arrowkeys.interval, 0);
                    },
                },
                arrowright: {
                    pressing: false,
                    /**@param {MoveData} moves*/
                    _do: function(moves){
                        moves.left += -MOVEPROPERTY.arrowkeys.move;
                        return moves;
                    },
                    _leave: function(){
                        frict(-MOVEPROPERTY.arrowkeys.move*1000/MOVEPROPERTY.arrowkeys.interval, 0);
                    },
                },
            };
        
            
            /**@ts-ignore @type {NodeJS.Timeout} */
            var _ami = 0;
            function _arrowmoves(){
                clearInterval(_ami);
                _ami = setInterval(() => {
                    /**@type {MoveData} */
                    var _moves = { top: 0, left: 0 };
                    for (const _key in arrowkeyBehavs){
                        if (arrowkeyBehavs[_key].pressing)
                            _moves = arrowkeyBehavs[_key]._do(_moves);
                    }
                    moveMapAssistingNegative(canvas, ctx, _moves);
                }, MOVEPROPERTY.arrowkeys.interval);
            }
            function _stopArrowmoves(){
                clearInterval(_ami);
            }
        
            window.addEventListener("keydown", function(e){
                const key = e.key.toLowerCase();
                
                if (key in arrowkeyBehavs){
                    var actives = 0;
                    Object.keys(arrowkeyBehavs).forEach(o => { if (arrowkeyBehavs[o].pressing) actives++; })
                    if (actives == 0){
                        _arrowmoves();
                    }
        
                    arrowkeyBehavs[key].pressing = true;
                }
            });
        
            
            window.addEventListener("keyup", function(e){
                const key = e.key.toLowerCase();
        
                if (key in arrowkeyBehavs){
                    arrowkeyBehavs[key].pressing = false;
        
                    var actives = 0;
                    Object.keys(arrowkeyBehavs).forEach(o => { if (arrowkeyBehavs[o].pressing) actives++; })
                    if (actives == 0){
                        _stopArrowmoves();
                    }
                }
            });
        
        
            function wheel_move(e){
                if (illegal(e))
                    return;
                clearInterval(tout);
                //@ts-ignore
                tout = setTimeout(() => {
                    setBehavParam();
                }, href_replaceCD);
                canvasonScroll(e, canvas);
            }
        
            function mm(e){
                e.preventDefault();
                map_wrapper.style.cursor = "move";
                Array.from(document.getElementsByClassName("canvas_interactive")).forEach(
                    p => {
                        //@ts-ignore
                        p.style.cursor = "move";
                    }
                );
                DRAGGING = !0;
                onMouseMove(e, canvas, ctx);
            }
        
            function mouse_lost(e){
                e.preventDefault();
                pointerPosition = [ null, null ];
                window.removeEventListener("mousemove", mm);
                map_wrapper.style.cursor = "default";
                Array.from(document.getElementsByClassName("canvas_interactive")).forEach(
                    p => {
                        //@ts-ignore
                        p.style.cursor = p.getAttribute("dfcs");
                    }
                )
        
                const vx = pointerVelocity.x,
                      vy = pointerVelocity.y;
        
                if (DRAGGING){
                    DRAGGING = false;
                    return frict(vx, vy);
                }
            }
        
            
            function frict(vx0, vy0){
                function i(n){
                    return n < 0 ? -1 : 1;
                }
        
                if (frictInterval !== null)
                    clearInterval(frictInterval);
        
                var vx = vx0,
                    vy = vy0,
                    dxa = pointerVelocity.a*i(vx0),
                    dya = pointerVelocity.a*i(vy0);
        
                if (isNaN(vx) || isNaN(vy))
                    return 0;
        
                //@ts-ignore
                frictInterval = setInterval(() => {
                    var ag = { top: vy/1000, left: vx/1000 };
                    if (ag.top*vy0 <= 0) ag.top = 0;
                    if (ag.left*vx0 <= 0) ag.left = 0;
        
                    moveMapAssistingNegative(canvas, ctx, ag);
        
                    vx += dxa;
                    vy += dya;
                    if (vx*vx0 <= 0 && vy*vy0 <= 0 && frictInterval !== null){
                        //@ts-ignore
                        tout = setTimeout(function(){
                            setBehavParam();
                        }, href_replaceCD)
                        clearInterval(frictInterval);
                    }
                }, 1);
                return 0;
            }
        
        
            document.body.addEventListener("mousemove", function(e){
                e.preventDefault();
                cursorPosition = [ e.clientX, e.clientY ];
            });
        
        
            function init_friction(){
                DRAGGING = false;
                if (frictInterval !== null)
                    clearInterval(frictInterval);
                if (zoomFrictInterval !== null)
                    clearInterval(zoomFrictInterval);
            }
            /**
             * 
             * @param {TouchEvent} e 
             */
            function initTouch(e){
                touchCD = 0;
                zoomCD = 0;
                totalRotateThisTime = 0;
                rotatedThisTime = 0;
                prevTheta = -1;
                previousTouchDistance = { x: -1, y: -1, distance: -1 };
                prevTouchINFO.real = [];
                if (e.touches.length < 2)
                    pastRotateMin = false;
            }
            return 0;
        }();
        
        
        //@ts-check
        "use strict";
        
        
        !function(){
            /**@ts-ignore @type {HTMLElement} */
            const fselector = document.getElementById("place-selector");
            /**@ts-ignore @type {HTMLCanvasElement} */
            const canvas = document.getElementById("shishiji-canvas");
            /**@ts-ignore @type {CanvasRenderingContext2D} */
            const ctx = canvas.getContext("2d");
        
            
            $("#place-options").children().each(function(index, elm){
                if (!this.textContent)
                    return;
                const text = this.textContent?.replace(/ /g, "").replace(/\n/g, "");
                if (text.length < 1)
                    return;
                
        
                /**@this {HTMLElement} @param {string} name */
                function addListener(name){
                    this.addEventListener("click", function(e){
                        e.preventDefault();
                        const data = MAPDATA[name];
                        if (CURRENT_FLOOR === name || data === undefined){
                            return;
                        }
        
                        changeFloor(name, data);
                    });
                    return 0;
                };
        
                addListener.apply(this, [text])
            });
        
            $(fselector)
            .on("click", function(e){
                e.preventDefault();
                if (e.target?.classList.contains("fselector-btn") || e.target?.id == "psdummy"){
                    toggleFeslOn.apply($(fselector), [overlay_modes.fselector.opened]);
                    overlay_modes.fselector.opened = !overlay_modes.fselector.opened;
                }
            });
            
            return 0;
        }();
        
        
        //@ts-check
        "use strict";
        
        
        !function(){
            // overview
            writeOverviewContent(`<div id="ovv-ctx-loading-w" class="protected"><h4 id="ovv-ctx-loading">${TEXT[LANGUAGE].PROCESSING}</h4></div>`, );
        
        
            window.addEventListener("click", function(e){
                /**@ts-ignore @type {HTMLElement} */
                const target = e.target;
                
                if ($(target).hasClass("article-image")){
                    const src = target.getAttribute("src");
        
                    if (src)
                        Popup.popupMedia(src, "img");
                } else if ($(target).hasClass("article-video")){
                    const src = target.getAttribute("src");
        
                    /*if (src)
                        Popup.popupMedia(src, "video");*/
                }
            });
        
            window.addEventListener("dblclick", function(e){
                /**@ts-ignore @type {HTMLElement} */
                const target = e.target;
        
                if ($(target).hasClass("article-video")){
                    const src = target.getAttribute("src");
        
                    /*if (src)
                        Popup.popupMedia(src, "video");*/
                }
            });
        
            return 0;
        }();
        
        
        //@ts-check
        "use strict";
        
        
        !function(){
            /**
             * popup
             * using css {@link ../css/shishijimap.css:474}
             */
            !function(){
                return;
                const $cp = $("#shishiji-popup-container-c");
        
                /**@param {string} str  */
                function delpxToNum(str){
                    return Number(str.replace("px", ""));
                }
        
                const base = {
                    width: delpxToNum($cp.css("width")),
                    height: delpxToNum($cp.css("height")),
                    margin: delpxToNum($cp.css("margin"))
                };
                
                $(window).on("resize", function(e){
                    var width = delpxToNum($cp.css("width"));
                    var height = delpxToNum($cp.css("height"));
                    var margin = delpxToNum($cp.css("margin"));
                    
                    if (window.innerWidth <= width+margin*2){
                        $cp.css("width", window.innerWidth-margin*2+"px");
                        width = window.innerWidth-margin*2;
                    } else {
                        $cp.css("width", base.width+"px");
                    }
        
                    $cp
                    .css("top", (window.innerHeight-(margin*2+height))/2+"px")
                    .css("left", (window.innerWidth-(margin*2+width))/2+"px");
                });
        
                return 0;
            }();
        
            return 0;
        }();
        
        
        //@ts-check
        "use strict";
        
        
        
        function setCanvasSizes(){
            /**@ts-ignore @type {HTMLCanvasElement} */
            const canvas = document.getElementById("shishiji-canvas");
            canvas.width = window.innerWidth; canvas.height = window.innerHeight;
            canvas.style.width = canvas.width+"px"; canvas.style.height = canvas.height+"px";
            backcanvas.canvas.width = canvas.width;
            backcanvas.canvas.height = canvas.height;
        }
        
        
        !function(){
            /**@ts-ignore @type {HTMLCanvasElement} */
            const canvas = document.getElementById("shishiji-canvas");
            /**@ts-ignore @type {CanvasRenderingContext2D} */
            const ctx = canvas.getContext("2d");
            /**@ts-ignore @type {string} */
            const loadType = window.performance?.getEntriesByType("navigation")[0].type;
            const PARAMS = {
                article: getParam(ParamName.ARTICLE_ID),
                zoomRatio: Number(getParam(ParamName.ZOOM_RATIO)) || 1,
                floor: getParam(ParamName.FLOOR),
                coords: getParam(ParamName.COORDS)?.split(",").map(a => { return (a === String(void 0) || isNaN(Number(a))) ? 0 : Number(a); }) || [ 0, 0 ],
                from: getParam(ParamName.URL_FROM),
                lang: digitLang(getParam(ParamName.LANGUAGE)),
            };
        
        
            LANGUAGE = PARAMS.lang || getUserLang() || "JA";
            
            if (PARAMS.coords.length != 2 
                || PARAMS.coords.some(u => {
                if (!u || isNaN(u))
                    return true;
                }
            )) PARAMS.coords = [ 0, 0 ];
        
            if (loadType == "reload"){
                switch (reloadInitializeLevel){
                    case reloadInitializeLevels.DO_EVERYTHING:
                    case reloadInitializeLevels.INIT_FLOOR:
                        PARAMS.floor = null;
                        delParam(ParamName.FLOOR);
                    case reloadInitializeLevels.INIT_COORDS:
                        PARAMS.coords = [ 0, 0 ];
                        delParam(ParamName.COORDS);
                    case reloadInitializeLevels.INIT_ZOOMRADIO:
                        PARAMS.zoomRatio = 1;
                        delParam(ParamName.ZOOM_RATIO);
                    case reloadInitializeLevels.CLOSE_ARTICLE:
                        PARAMS.article = null;
                        delParam(ParamName.ARTICLE_ID);
                    case reloadInitializeLevels.DO_NOTHING:
                    default:
        
                }
            }
        
            delParam(ParamName.URL_FROM);
        
            startLoad(TEXT[LANGUAGE].LOADING_MAP);
            setCanvasSizes();
        
            $.post("/data/map-data/conf")
            .done(function(data){
                MAPDATA = data;
                var initial_floor = data.initial_floor;
                var initial_data = data[data.initial_floor];
        
                if (PARAMS.floor && Object.keys(data).includes(PARAMS.floor)){
                    initial_floor = PARAMS.floor;
                    initial_data = data[PARAMS.floor];
                }
        
                backcanvas.width = initial_data.tile_width*(initial_data.xrange+1);
                backcanvas.height = initial_data.tile_height*(initial_data.yrange+1);
        
                drawMap(canvas, ctx, initial_data, callback);
                
                var loaded = 0;
                
                function callback(){
                    backcanvas.canvas.coords = {
                        //@ts-ignore
                        x: PARAMS.coords[0], y: PARAMS.coords[1]
                    };
                    if (PARAMS.zoomRatio > MOVEPROPERTY.caps.ratio.max) PARAMS.zoomRatio = MOVEPROPERTY.caps.ratio.max;
                    if (PARAMS.zoomRatio < MOVEPROPERTY.caps.ratio.min) PARAMS.zoomRatio = MOVEPROPERTY.caps.ratio.min;
        
                    zoomRatio = PARAMS.zoomRatio;
                    
                    moveMapAssistingNegative(canvas, ctx, { left: 0, top: 0 });
                    setBehavParam();
        
                    loaded++;
                    if (loaded == 2)
                        _loaded();
                }
            
                !function(){
                    $.post("/data/map-data/objects")
                    .done((objdata) => {
                        mapObjectComponent = objdata;
            
                        showDigitsOnFloor(initial_floor, mapObjectComponent);
            
                        CURRENT_FLOOR = initial_floor;
        
                        /**
                         * handles if wrong floor with shared article
                         * in order to make share link shorter
                         */
                        if (PARAMS.article){
                            const data = searchObject(PARAMS.article);
                            if (data && CURRENT_FLOOR != data.object.floor && MAPDATA[data.object.floor]){
                                changeFloor(data.object.floor, MAPDATA[data.object.floor], function(){
                                    loaded++;
                                    if (loaded == 2)
                                        _loaded();
                                });
                                return;
                            }
                        }
        
                        setParam(ParamName.FLOOR, CURRENT_FLOOR);
        
                        setPlaceSelColor();
                        
                        loaded++;
                        if (loaded == 2)
                            _loaded();
                    })
                    .fail((err) => {
                        
                    });
                    return 0;
                }();
            
                function _loaded(){
                    endLoad(TEXT[LANGUAGE].MAP_LOADED);
                    $("#app-mount").show();
                    if (PARAMS.article){
                        const data = searchObject(PARAMS.article);
                        var fromARTshare = false;
                        var scr_position = 0;
                        var article_tg = "description";
                        
                        if (PARAMS.from){
                            fromARTshare = !0;
                        }
        
                        if (data == null || CURRENT_FLOOR != data.object.floor){
                            if (fromARTshare){
                                setTimeout(() => {
                                    Notifier.notifyHTML(
                                        `<div id="shr-notf" class="flxxt" style="font-size: 12px;">${GPATH.ERROR}${TEXT[LANGUAGE].NOTIFICATION_SHARED_EVENT_NOT_FOUND}</div>`,
                                        7500,
                                        "share not found",
                                    );
                                }, 500);
                            }
                            delParam(ParamName.ARTICLE_ID);
                            return;
                        }
        
                        if (fromARTshare){
                            const coords = data.object.coordinate;
                            setCoordsOnMiddle(coords, ZOOMRATIO_ON_SHARE);
                            setTimeout(() => {
                                Notifier.notifyHTML(
                                    `<div id="shr-f" class="flxxt" style="font-size: 12px;">${GPATH.SUCCESS}${TEXT[LANGUAGE].NOTIFICATION_SHARED_EVENT_FOUND}</div>`,
                                    5000,
                                    "share found",
                                );
                            }, 1000);
        
                            var g = getParam(ParamName.SCROLL_POS);
                            var y = getParam(ParamName.ART_TARGET);
                            delParam(ParamName.SCROLL_POS);
                            delParam(ParamName.ART_TARGET);
                            if (g != null || y){
                                setTimeout(() => {
                                    Notifier.appendPending({
                                        html: `<div id="shr-f" class="flxxt" style="font-size: 12px;">${GPATH.SUCCESS}${TEXT[LANGUAGE].NOTIFICATION_SHARED_EVENT_TRANSITIONED}</div>`,
                                        term: 5000,
                                        discriminator: "transitioned to shared position",
                                    });
                                }, 1050);
                                scr_position = Number(g);
                                if (y)
                                    article_tg = y;
                            }
                        }
        
                        setTimeout(() => {
                            raiseOverview();
                            writeArticleOverview(data, true, scr_position, article_tg);
                        }, 1000);
                    }
                }
                return 0;
            })
            .fail(function(e){
        
            });
            
            return 0;
        }();
        
        
        window.addEventListener("resize", function(e){
            e.preventDefault();
            /**@ts-ignore @type {HTMLCanvasElement} */
            const canvas = document.getElementById("shishiji-canvas");
            setCanvasSizes();
            //@ts-ignore
            moveMapAssistingNegative(canvas, canvas.getContext("2d"), { top: 0, left: 0 });
            window.scroll({ top: 0, behavior: "instant" });
        }, { passive: false });
        
        
        window.addEventListener("gesturestart", function(e){
            e.preventDefault();
        }, { passive: false });
        
        
        window.addEventListener("dblclick", function(e){
            e.preventDefault();
        }, { passive: false });
        
        
        window.addEventListener("load", function(e){
            window.scroll({ top: 0, behavior: "instant" });
        });
        
        document.oncontextmenu = () => { return false; }
        
        
        
    });
    
    return 0;
}();
